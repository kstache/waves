#! /usr/bin/env python

import pathlib

# Inherit the parent construction environment
Import("env")

build_directory = pathlib.Path(Dir(".").abspath)

# Limit list of source files to allow Conda build-test to test off the installed package
pytest_source_list = [
    "pyproject.toml",
]

pytest_command = "cd ${package_dir} && pytest --junitxml=${TARGETS[0].abspath} -n 4 "
if env["unconditional_build"]:
    pytest_command += " --unconditional-build"
target = ["test_results.xml"]

coverage = ""
coverage_command = ""
if env["coverage_report"]:
    target.extend(["coverage.xml", Dir("./coverage")])
    coverage = "--cov --cov-report xml:${TARGETS[1].abspath} --cov-report=html:${TARGETS[2].abspath}"

pytest_node = env.Command(
    target=target,
    source=pytest_source_list,
    action=[
        '${pytest_command} -vvv -m "not systemtest" ${coverage}',
    ],
    package_dir=env["package_dir"],
    pytest_command=pytest_command,
    coverage=coverage,
)
env.Alias("pytest", pytest_node)
env.Clean("pytest", Dir("./coverage"))
# Always run pytests in place of a complete source list
env.AlwaysBuild(pytest_node)

target = ["systemtest_results.xml"]
source = pytest_source_list + [str(pathlib.Path("waves/tests/test_system.py"))]
systemtest_node = env.Command(
    target=target,
    source=source,
    action=[
        "${pytest_command} -v --no-showlocals -m systemtest --tb=short --cache-clear --system-test-dir=${system_test_directory}"
    ],
    package_dir=env["package_dir"],
    pytest_command=pytest_command,
    system_test_directory=build_directory,
)
env.Alias("systemtest", systemtest_node)
env.AlwaysBuild(systemtest_node)
env.Clean(systemtest_node, [Dir(build_directory)])

# Collector alias to build all regression tasks
env.Alias("regression", pytest_node + systemtest_node)
