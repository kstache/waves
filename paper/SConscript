#! /usr/bin/env python

import pathlib

# Inherit the parent construction environment
Import(['env', 'project_substitution_dictionary'])
project_dir = pathlib.Path(env['project_dir'])

# Set empty alias return list
alias_list = []

# Perform variable substitution on Sphinx configuration file
env.Substfile(
    "conf.py.in",
    SUBST_DICT=project_substitution_dictionary)

# Explicit Sphinx documentation dependency list
documentation_file_list = [
    'conf.py',  # Generated by an SCons target
    'README.txt',  # Copied from README.rst to docs build directory by root SConscript
    'eabm_api.rst',
    'eabm_cli.rst',
    'eabm_abaqus_files.rst',
    'computational_practices_introduction.rst',
    'computational_practices_version_control.rst',
    'computational_practices_documentation.rst',
    'computational_practices_build_system.rst',
    'computational_practices_compute_environment.rst',
    'computational_practices_regression_testing.rst',
    'glossary.rst',
    'index.rst',
    'project_brief.txt',
    'references.bib',
    'scons_quickstart.rst',
    'scons_multiactiontask.rst',
    'scons_tutorial_directory.txt',
    'scons_tutorial_environment.txt',
    'scons_tutorial_introduction.txt',
    'targets.txt',
    'zreferences.rst',
]

# Copy tutorial files to the build/docs directory
eabm_dir = project_dir / pathlib.Path(env['eabm_dir'])
tutorial_files_list = [
    eabm_dir / 'scons_quickstart_SConstruct',
    eabm_dir / 'scons_multiactiontask_SConstruct',
    eabm_dir / env['abaqus_dir'] / 'single_element_geometry.py',
    eabm_dir / env['abaqus_dir'] / 'single_element_partition.py',
    eabm_dir / env['abaqus_dir'] / 'single_element_mesh.py',
    eabm_dir / env['abaqus_dir'] / 'abaqus_journal_utilities.py',
    eabm_dir / env['abaqus_dir'] / 'single_element_compression.inp',
    eabm_dir / env['abaqus_dir'] / 'amplitudes.inp',
    eabm_dir / env['abaqus_dir'] / 'assembly.inp',
    eabm_dir / env['abaqus_dir'] / 'boundary.inp',
    eabm_dir / env['abaqus_dir'] / 'field_output.inp',
    eabm_dir / env['abaqus_dir'] / 'history_output.inp',
    eabm_dir / env['abaqus_dir'] / 'materials.inp',
    eabm_dir / env['abaqus_dir'] / 'parts.inp',
]
for file_path in tutorial_files_list:
    target = f'{file_path.parts[-2]}_{file_path.name}'
    Command(target=target,
            source=str(file_path),
            action=Copy("$TARGET", "$SOURCE"))
    documentation_file_list.append(target)

# TODO: os agnostic pathsep for the html directory
# https://re-git.lanl.gov/aea/python-projects/waves/-/issues/4
latexpdf = env.Command(
    target=[Dir('latex')],
    source=documentation_file_list,
    action=f"{env['sphinx_build']} -M latexpdf ${{TARGET.dir.abspath}} ${{TARGET.dir.abspath}}")
env.Clean(latexpdf, Dir('latex'))
env.AlwaysBuild(latexpdf)
alias_list.extend(env.Alias('paper', latexpdf))

if not env['unconditional_build'] and not env['sphinx_build']:
    print(f"Program 'sphinx-build' was not found in construction environment. Ignoring Sphinx target(s)")
    Ignore(['.', 'latex', 'paper'], latexpdf)

# Return the alias list to SConstruct for help message output
Return('alias_list')
