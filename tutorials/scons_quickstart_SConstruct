#! /usr/bin/env python

import os
import sys
import pathlib

# Inherit user's full environment
env = Environment(ENV=os.environ.copy())

# Empty defaults list to avoid building all simulation targets by default
env.Default()

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(Dir('.').abspath)
variant_dir_base = pathlib.Path('build_scons_quickstart').resolve()

# Make the EABM package importable for Python and Abaqus Python environments
env.PrependENVPath("PYTHONPATH", str(project_dir))

# Separate target output from source files
VariantDir(variant_dir_base.name, '.', duplicate=False)

# Find required programs for conditional target ignoring and absolute path for use in target actions
conf = env.Configure()
env['abaqus'] = conf.CheckProg('/apps/abaqus/Commands/abq2022')
conf.Finish()
if env['abaqus']:
    env.PrependENVPath("PATH", str(pathlib.Path(env['abaqus']).parent))

# Write project builders for re-use in task definitions
abaqus_journal = Builder(
    action="cd ${TARGET.dir.abspath} && ${abaqus_program} cae -noGui ${SOURCE.abspath} ${abaqus_options} -- " \
               "${journal_options}")

abaqus_solver = Builder(
    action="cd ${TARGET.dir.abspath} && ${abaqus_program} -job ${job_name} -input ${SOURCE.filebase} " \
                  "${abaqus_options} -interactive -ask_delete no")

# Add custom builders
env.Append(BUILDERS=
    {'AbaqusJournal': abaqus_journal,
     'AbaqusSolver': abaqus_solver})

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Geometry
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[str(variant_dir_base / "single_element_geometry.cae")],
    source=[str(project_dir / "eabm_package/abaqus/single_element_geometry.py")],
    abaqus_program=env['abaqus'],
    journal_options=journal_options))

# Partition
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[str(variant_dir_base / "single_element_partition.cae")],
    source=[str(project_dir / "eabm_package/abaqus/single_element_partition.py"), str(variant_dir_base / "single_element_geometry.cae")],
    abaqus_program=env['abaqus'],
    journal_options=journal_options))

# Mesh
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[str(variant_dir_base / "single_element_mesh.inp"), str(variant_dir_base / "single_element_mesh.cae")],
    source=[str(project_dir / "eabm_package/abaqus/single_element_mesh.py"), str(variant_dir_base / "single_element_partition.cae")],
    abaqus_program=env['abaqus'],
    journal_options=journal_options))

# SolverPrep
abaqus_source_list = [
    project_dir / "eabm_package/abaqus/single_element_compression.inp",
    project_dir / "eabm_package/abaqus/assembly.inp",
    project_dir / "eabm_package/abaqus/boundary.inp",
    project_dir / "eabm_package/abaqus/field_output.inp",
    project_dir / "eabm_package/abaqus/materials.inp",
    project_dir / "eabm_package/abaqus/parts.inp",
    project_dir / "eabm_package/abaqus/history_output.inp"
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
for source_file in abaqus_source_list:
    copy_target = variant_dir_base / source_file.name
    workflow.extend(env.Command(
        target=str(copy_target),
        source=str(source_file),
        action=Copy('${TARGET}', '${SOURCE}')))

# Abaqus Solve
abaqus_options='-double both'
common_suffixes = ('odb', 'dat', 'msg', 'com', 'prt')
solve_source_list = [str(variant_dir_base / source_file.name) for source_file in abaqus_source_list]
solve_source_list.append(str(variant_dir_base / "single_element_mesh.inp"))
job_name = pathlib.Path(solve_source_list[0]).stem

solve_suffixes = common_suffixes + ('sta',)
solve_targets = [str(variant_dir_base / (job_name + "." + suffix)) for suffix in solve_suffixes]
workflow.extend(env.AbaqusSolver(
    target=solve_targets,
    source=solve_source_list,
    abaqus_program=env['abaqus'],
    job_name=job_name,
    abaqus_options=abaqus_options))

# Collector alias named after the model simulation
env.Alias("single_element", workflow)

if not env['abaqus']:
    print("Program 'abaqus' was not found in construction environment. Ignoring 'single_element' target(s)")
    Ignore(['.', "single_element"], workflow)
