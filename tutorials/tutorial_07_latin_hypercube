#! /usr/bin/env python
"""Single element compression workflow

Requires the following ``SConscript(..., exports=[])``

* ``env`` - The SCons construction environment with the following required keys

  * ``abaqus_source_abspath`` - String absolute path to the EABM's Abaqus journal files
  * ``python_source_abspath`` - String absolute path to the EABM's Python 3 files
  * ``unconditional_build`` - Boolean flag to force building of conditionally ignored targets
  * ``abaqus`` - String path for the Abaqus executable
"""

import pathlib

import waves

from eabm_package.python.single_element_compression_latin_hypercube import parameter_schema

# Inherit the parent construction environment
Import('env')

# Comment used in tutorial code snippets: marker-1

# Set project-wide paths with os-agnostic path separators
abaqus_source_abspath = pathlib.Path(env["abaqus_source_abspath"])
python_source_abspath = pathlib.Path(env["python_source_abspath"])

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
output_file_type = "h5"
parameter_study_file = build_directory / f"parameter_study.{output_file_type}"
previous_parameter_study = str(parameter_study_file) if parameter_study_file.exists() else None
model = "single_element"
simulation_constants = {
    'global_seed': 1,
    'displacement': -0.01
}

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []

# Comment used in tutorial code snippets: marker-2

# Parameter Study with Latin Hypercube
parameter_generator = waves.parameter_generators.LatinHypercube(
    parameter_schema,
    output_file=parameter_study_file,
    output_file_type=output_file_type,
    previous_parameter_study=previous_parameter_study)
parameter_generator.generate()
parameter_study = parameter_generator.parameter_study

workflow.extend(env.Command(
    target=[parameter_study_file.name],
    source=[str(python_source_abspath / "single_element_compression_latin_hypercube.py")],
    action=[parameter_generator.scons_write]))

# Comment used in tutorial code snippets: marker-3

# Parameterized targets must live inside current simulation_variables for loop
for set_name, parameters in parameter_generator.parameter_study.sel(data_type='samples').groupby('parameter_sets'):
    set_name = pathlib.Path(set_name)
    simulation_variables = {**parameters.squeeze().to_array().to_series().to_dict(), **simulation_constants}

    # Comment used in tutorial code snippets: marker-4

    # Geometry
    journal_file = f"{model}_geometry"
    journal_options = f"--width {simulation_variables['width']} --height {simulation_variables['height']}"
    workflow.extend(env.AbaqusJournal(
        target=[f"{set_name / journal_file}.cae",
                f"{set_name / journal_file}.jnl"],
        source=[f"{abaqus_source_abspath / journal_file}.py"],
        journal_options=journal_options))

    # Partition
    journal_file = f"{model}_partition"
    journal_options = f"--width {simulation_variables['width']} --height {simulation_variables['height']}"
    workflow.extend(env.AbaqusJournal(
        target=[f"{set_name / journal_file}.cae",
                f"{set_name / journal_file}.jnl"],
        source=[f"{abaqus_source_abspath / journal_file}.py",
                f"{set_name / model}_geometry.cae"],
        journal_options=journal_options))

    # Mesh
    journal_file = f"{model}_mesh"
    journal_options = f"--global-seed {simulation_variables['global_seed']}"
    workflow.extend(env.AbaqusJournal(
        target=[f"{set_name / journal_file}.inp",
                f"{set_name / journal_file}.cae",
                f"{set_name / journal_file}.jnl"],
        source=[f"{abaqus_source_abspath / journal_file}.py",
                f"{set_name / model}_partition.cae"],
        journal_options=journal_options))

    # SolverPrep
    abaqus_source_list = [
        abaqus_source_abspath / f"{model}_compression.inp.in",
        abaqus_source_abspath / "assembly.inp",
        abaqus_source_abspath / "boundary.inp",
        abaqus_source_abspath / "field_output.inp",
        abaqus_source_abspath / "materials.inp",
        abaqus_source_abspath / "parts.inp",
        abaqus_source_abspath / "history_output.inp"
    ]
    abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
    workflow.extend(waves.builders.copy_substitute(
        abaqus_source_list,
        substitution_dictionary=waves.builders.substitution_syntax(simulation_variables),
        build_subdirectory=set_name))

# Comment used in tutorial code snippets: marker-5

    # Abaqus Solve
    solve_source_list = [f"{set_name / source_file.name.rstrip('.in')}" for source_file in abaqus_source_list]
    solve_source_list.append([f"{set_name / journal_file}.inp"])
    job_name = pathlib.Path(solve_source_list[0]).stem
    datacheck_name = f"{job_name}_DATACHECK"
    datacheck_suffixes = ('023', 'mdl', 'sim', 'stt')
    abaqus_options='-double both'
    datacheck.extend(env.AbaqusSolver(
        target=[f"{set_name / datacheck_name}.{suffix}" for suffix in datacheck_suffixes],
        source=solve_source_list,
        job_name=datacheck_name,
        abaqus_options=f'{abaqus_options} -datacheck'))

    workflow.extend(env.AbaqusSolver(
        target=[f"{set_name / job_name}.sta"],
        source=solve_source_list,
        job_name=job_name,
        abaqus_options=abaqus_options))

# Comment used in tutorial code snippets: marker-6

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)
env.Alias(f"{workflow_name}_datacheck", datacheck)

if not env['unconditional_build'] and not env['abaqus']:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{workflow_name}' target(s)")
    Ignore(['.', workflow_name], workflow)
    Ignore(['.', workflow_name], datacheck)
