#! /usr/bin/env python

import os
import sys
import pathlib

import waves

# Inherit user's full environment
env = Environment(ENV=os.environ.copy())

# Empty defaults list to avoid building all simulation targets by default
env.Default()

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(Dir('.').abspath)
variant_dir_base = pathlib.Path('build_waves_quickstart')

# Make the EABM package importable for Python and Abaqus Python environments
env.PrependENVPath("PYTHONPATH", str(project_dir))

# Separate target output from source files
VariantDir(variant_dir_base.name, '.', duplicate=False)

# Find required programs for conditional target ignoring and absolute path for use in target actions
env['abaqus'] = waves.builders.add_program(["/apps/abaqus/Commands/abq2022", "abq2022"], env)

# Add WAVES builders
env.Append(BUILDERS=
    {'AbaqusJournal': waves.builders.abaqus_journal(abaqus_program=env['abaqus']),
     'AbaqusSolver': waves.builders.abaqus_solver(abaqus_program=env['abaqus'])})

# Simulation variables
model = "single_element"

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Geometry
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[str(variant_dir_base / "single_element_geometry.cae")],
    source=[str(project_dir / "eabm_package/abaqus/single_element_geometry.py")],
    journal_options=journal_options))

# Partition
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[str(variant_dir_base / "single_element_partition.cae")],
    source=[str(project_dir / "eabm_package/abaqus/single_element_partition.py"), 
            str(variant_dir_base / "single_element_geometry.cae")],
    journal_options=journal_options))

# Mesh
journal_file = "single_element_mesh"
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[str(variant_dir_base / "single_element_mesh.inp"), 
            str(variant_dir_base / "single_element_mesh.cae")],
    source=[str(project_dir / "eabm_package/abaqus/single_element_mesh.py"), 
            str(variant_dir_base / "single_element_partition.cae")],
    journal_options=journal_options))

# SolverPrep
abaqus_source_list = [
    project_dir / "eabm_package/abaqus/single_element_compression.inp",
    project_dir / "eabm_package/abaqus/assembly.inp",
    project_dir / "eabm_package/abaqus/boundary.inp",
    project_dir / "eabm_package/abaqus/field_output.inp",
    project_dir / "eabm_package/abaqus/materials.inp",
    project_dir / "eabm_package/abaqus/parts.inp",
    project_dir / "eabm_package/abaqus/history_output.inp"
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
workflow.extend(waves.builders.copy_substitute(abaqus_source_list, build_subdirectory=str(variant_dir_base)))

# Abaqus Solve
abaqus_options = '-double both'
solve_source_list = [str(variant_dir_base / source_file.name.rstrip('.in')) for source_file in abaqus_source_list]
solve_source_list.append(str(variant_dir_base / "single_element_mesh.inp"))

workflow.extend(env.AbaqusSolver(
    target=[str(variant_dir_base / "single_element_compression.sta")],
    source=solve_source_list,
    job_name="single_element_compression",
    abaqus_options=abaqus_options))

# Collector alias named after the model simulation
env.Alias('single_element', workflow)

if not env['abaqus']:
    print("Program 'abaqus' was not found in construction environment. Ignoring 'single_element' target(s)")
    Ignore(['.', 'single_element'], workflow)
