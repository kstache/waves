#! /usr/bin/env python

import os
import sys
import pathlib

import waves

# Inherit user's full environment
env = Environment(ENV=os.environ.copy())

# Empty defaults list to avoid building all simulation targets by default
env.Default()

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(Dir('.').abspath)
abaqus_source_dir = 'eabm_package/abaqus'
abaqus_source_abspath = project_dir / abaqus_source_dir
variant_dir_base = pathlib.Path('build_waves_quickstart')

# Make the EABM package importable for Python and Abaqus Python environments
env.PrependENVPath("PYTHONPATH", str(project_dir))

# Separate target output from source files
VariantDir(variant_dir_base.name, '.', duplicate=False)

# Find required programs for conditional target ignoring and absolute path for use in target actions
env['abaqus'] = waves.builders.add_program(["/apps/abaqus/Commands/abq2022", "abq2022"], env)

# Add WAVES builders
env.Append(BUILDERS=
    {'AbaqusJournal': waves.builders.abaqus_journal(abaqus_program=env['abaqus']),
     'AbaqusSolver': waves.builders.abaqus_solver(abaqus_program=env['abaqus'])})

# Simulation variables
model = "single_element"

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Geometry
journal_file = f"{model}_geometry"
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[f"{variant_dir_base / journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py"],
    journal_options=journal_options))

# Partition
journal_file = f"{model}_partition"
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[f"{variant_dir_base / journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py", str(variant_dir_base / f"{model}_geometry.cae")],
    journal_options=journal_options))

# Mesh
journal_file = f"{model}_mesh"
journal_options = ""
workflow.extend(env.AbaqusJournal(
    target=[f"{variant_dir_base / journal_file}.inp", f"{variant_dir_base / journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py", str(variant_dir_base / f"{model}_partition.cae")],
    journal_options=journal_options))

# SolverPrep
abaqus_source_list = [
    abaqus_source_abspath / f"{model}_compression.inp",
    abaqus_source_abspath / "assembly.inp",
    abaqus_source_abspath / "boundary.inp",
    abaqus_source_abspath / "field_output.inp",
    abaqus_source_abspath / "materials.inp",
    abaqus_source_abspath / "parts.inp",
    abaqus_source_abspath / "history_output.inp"
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
workflow.extend(waves.builders.copy_substitute(abaqus_source_list, build_subdirectory=variant_dir_base))

# Abaqus Solve
solve_source_list = [str(variant_dir_base /source_file.name.rstrip('.in')) for source_file in abaqus_source_list]
solve_source_list.append([str(variant_dir_base / f"{journal_file}.inp")])
job_name = pathlib.Path(solve_source_list[0]).stem

workflow.extend(env.AbaqusSolver(
    target=[f"{variant_dir_base / job_name}.sta"],
    source=solve_source_list,
    job_name=job_name,
    abaqus_options=abaqus_options))

# Collector alias named after the model simulation
env.Alias(model, workflow)

if not env['abaqus']:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{model}' target(s)")
    Ignore(['.', model], workflow)
