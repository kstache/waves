#! /usr/bin/env python

import os
import sys
import pathlib

# Inherit user's full environment
env = Environment(ENV=os.environ.copy())

# Empty defaults list to avoid building all simulation targets by default
env.Default()

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(Dir('.').abspath)
abaqus_source_dir = 'eabm_package/abaqus'
abaqus_source_abspath = project_dir / abaqus_source_dir
variant_dir_base = pathlib.Path('build_scons_multiactiontask')

# Separate target output from source files
VariantDir(variant_dir_base.name, '.', duplicate=False)

# Find required programs for conditional target ignoring and absolute path for use in target actions
conf = env.Configure()
env['abaqus'] = conf.CheckProg('abq2021')
conf.Finish()

# Write project builders for re-use in task definitions
abaqus_journal = Builder(
    action="cd ${TARGET.dir.abspath} && ${abaqus_program} cae -noGui ${SOURCE.abspath} ${abaqus_options} -- " \
               "${journal_options}")

abaqus_solver = Builder(
    action="cd ${TARGET.dir.abspath} && ${abaqus_program} -job ${job_name} -input ${SOURCE.filebase} " \
                  "${abaqus_options} -interactive -ask_delete no")

# Add custom builders
env.Append(BUILDERS=
    {'AbaqusJournal': abaqus_journal,
     'AbaqusSolver': abaqus_solver})

# Simulation variables
model = "single_element"

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []

# Geometry, Partition, Mesh
workflow.extend(env.Command(
    target=[f"{variant_dir_base / model}_mesh.cae", f"{variant_dir_base / model}_mesh.inp"],
    source=[f"{abaqus_source_abspath / model}_geometry.py",
            f"{abaqus_source_abspath / model}_partition.py",
            f"{abaqus_source_abspath / model}_mesh.py"],
    action=[f"cd ${{TARGET.dir.abspath}} && ${{abaqus_program}} cae -noGui ${{SOURCE.dir.abspath}}/{model}_geometry.py " \
                "${abaqus_options} -- --output-file ${TARGET.filebase}",
            f"cd ${{TARGET.dir.abspath}} && ${{abaqus_program}} cae -noGui ${{SOURCE.dir.abspath}}/{model}_partition.py " \
                "${abaqus_options} -- --input-file ${TARGET.filebase} --output-file ${TARGET.filebase}",
            f"cd ${{TARGET.dir.abspath}} && ${{abaqus_program}} cae -noGui ${{SOURCE.dir.abspath}}/{model}_mesh.py " \
                "${abaqus_options} -- --input-file ${TARGET.filebase} --output-file ${TARGET.filebase}"],
    abaqus_program=env['abaqus']
))

# SolverPrep
abaqus_source_list = [
    abaqus_source_abspath / "{model}_compression.inp",
    abaqus_source_abspath / "assembly.inp",
    abaqus_source_abspath / "boundary.inp",
    abaqus_source_abspath / "field_output.inp",
    abaqus_source_abspath / "materials.inp",
    abaqus_source_abspath / "parts.inp",
    abaqus_source_abspath / "history_output.inp"
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
for source_file in abaqus_source_list:
    copy_target = variant_dir_base / source_file.name
    workflow.extend(env.Command(
        target=str(copy_target),
        source=str(source_file),
        action=Copy('${TARGET}', '${SOURCE}')))

# Abaqus Solve
abaqus_options='-double both'
common_suffixes = ('odb', 'dat', 'msg', 'com', 'prt')
solve_source_list = [str(variant_dir_base / source_file.name) for source_file in abaqus_source_list]
solve_source_list.append(str(variant_dir_base / f"{model}_mesh.inp"))
job_name = pathlib.Path(solve_source_list[0]).stem

datacheck_suffixes = common_suffixes + ('023', 'mdl', 'sim', 'stt')
datacheck_name = f"{job_name}_DATACHECK"
datacheck_targets = [f"{variant_dir_base / datacheck_name}.{suffix}" for suffix in datacheck_suffixes]
datacheck.extend(env.AbaqusSolver(
    target=datacheck_targets,
    source=solve_source_list,
    abaqus_program=env['abaqus'],
    job_name=datacheck_name,
    abaqus_options=f'{abaqus_options} -datacheck'))

solve_suffixes = common_suffixes + ('sta',)
solve_targets = [f"{variant_dir_base / job_name}.{suffix}" for suffix in solve_suffixes]
workflow.extend(env.AbaqusSolver(
    target=solve_targets,
    source=solve_source_list,
    abaqus_program=env['abaqus'],
    job_name=job_name,
    abaqus_options=abaqus_options))

# Collector alias named after the model simulation
env.Alias(model, workflow)
env.Alias(f"{model}_datacheck", datacheck)

if not env['abaqus']:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{model}' target(s)")
    Ignore(['.', model], workflow)
    Ignore(['.', model], datacheck)
