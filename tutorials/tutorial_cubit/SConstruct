#! /usr/bin/env python

import os
import pathlib

import waves

# Comments used in tutorial code snippets: marker-1

# Accept command line options with fall back default values
AddOption(
    "--build-dir",
    dest="variant_dir_base",
    default="build",
    nargs=1,
    type="string",
    action="store",
    metavar="DIR",
    help="SCons build (variant) root directory. Relative or absolute path. (default: '%default')"
)
AddOption(
    "--unconditional-build",
    dest="unconditional_build",
    default=False,
    action="store_true",
    help="Boolean flag to force building of conditionally ignored targets, e.g. if the target's action program is missing" \
            " and it would normally be ignored. (default: '%default')"
)
AddOption(
    "--print-build-failures",
    dest="print_build_failures",
    default=False,
    action="store_true",
    help="Print task *.stdout target file(s) on build failures. (default: '%default')"
)

# Comments used in tutorial code snippets: marker-2

# Inherit user's full environment and set project variables
env = Environment(ENV=os.environ.copy(),
                  variant_dir_base=GetOption("variant_dir_base"),
                  unconditional_build=GetOption("unconditional_build"),
                  print_build_failures=GetOption("print_build_failures"))

# Conditionally print failed task *.stdout files
waves.scons_extensions.print_build_failures(env["print_build_failures"])

# Comments used in tutorial code snippets: marker-3

# Find required programs for conditional target ignoring and absolute path for use in target actions
env['abaqus'] = waves.scons_extensions.add_program(["/apps/abaqus/Commands/abq2023", "abq2023"], env)
env["cubit"] = waves.scons_extensions.add_cubit(["/apps/Cubit-16.12/cubit", "cubit"], env)

# Sierra requires a separate construction environment
envSierra = waves.scons_extensions.shell_environment("module use /projects/aea_compute/modulefiles && module load sierra")
envSierra["sierra"] = waves.scons_extensions.add_program(["sierra"], envSierra)

# Comments used in tutorial code snippets: marker-4

# Set project internal variables and variable substitution dictionaries
project_name = 'WAVES-TUTORIAL'
version = '0.1.0'
project_dir = pathlib.Path(Dir(".").abspath)
abaqus_source_dir = "eabm_package/abaqus"
cubit_source_dir = "eabm_package/cubit"
sierra_source_dir = "eabm_package/sierra"
project_variables = {
    'project_name': project_name,
    'project_dir': str(project_dir),
    'version': version,
    'abaqus_source_abspath': str(project_dir / abaqus_source_dir),
    'cubit_source_abspath': str(project_dir / cubit_source_dir),
    'sierra_source_abspath': str(project_dir / sierra_source_dir)
}
for key, value in project_variables.items():
    env[key] = value

# Comments used in tutorial code snippets: marker-5

# Build path object for extension and re-use
variant_dir_base = pathlib.Path(env['variant_dir_base'])

# Add custom builders
env.Append(BUILDERS={
    'AbaqusJournal': waves.scons_extensions.abaqus_journal(program=env['abaqus']),
    'AbaqusSolver': waves.scons_extensions.abaqus_solver(program=env['abaqus']),
    'PythonScript': waves.scons_extensions.python_script()
})
envSierra.Append(BUILDERS={
    'Sierra': waves.scons_extensions.sierra(program=envSierra['sierra'])
})

# Comments used in tutorial code snippets: marker-6

# Add simulation targets
workflow_configurations = [
    'abaqus',
    'sierra'
]
for workflow in workflow_configurations:
    build_dir = variant_dir_base / workflow
    SConscript(workflow, variant_dir=build_dir, exports=["env", "envSierra"], duplicate=False)

# Comments used in tutorial code snippets: marker-7

# Add default target list to help message
env.Default()  # Empty defaults list to avoid building all simulation targets by default
# Add aliases to help message so users know what build target options are available
# This must come *after* all expected Alias definitions and SConscript files.
waves.scons_extensions.project_help_message()

# Comments used in tutorial code snippets: marker-8
