import sys
import os
import pathlib
import unittest.mock
import subprocess

# -- Project information -----------------------------------------------------
# Meta data from SCons project
project = '@PROJECT_NAME@'
VERSION = '@VERSION@'
project_dir = pathlib.Path('@PROJECT_DIR@').resolve()
abaqus_source_dir = '@ABAQUS_SOURCE_DIR@'

# Add paths to API/CLI files
sys.path.insert(0, str(project_dir))
sys.path.insert(0, str(project_dir / abaqus_source_dir))

# Mock modules unavailable in the AEA Compute environment, e.g. Abaqus Python modules.
mock_modules = ['abaqus', 'abaqusConstants', 'mesh']
for mod_name in mock_modules:
    sys.modules[mod_name] = unittest.mock.Mock()

release = VERSION
version = release

# ============================================================================ GENERATE CLI OUTPUT FOR SHELL SCRIPTS ===
# TODO: add abaqus wrapper
# https://re-git.lanl.gov/kbrindley/scons-simulation/-/issues/2
#bash_scripts = [abaqus_wrapper]
bash_scripts = []
script_options = [[]]
for script, options in zip(bash_scripts, script_options):
    message_command = subprocess.Popen([f'{script}'] + options,
                                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = message_command.communicate()
    exit_code = message_command.returncode
    # TODO: Check for non-zero exit code and raise an error after simulation.sh is given an '-h' flag option
    # https://re-git.lanl.gov/kbrindley/cmake-simulation/-/issues/72
    with open(f'{pathlib.Path(script).stem}_message.txt', 'w') as script_message_file:
        command_line_example = f"$ ./{buildsystem_dir}/{pathlib.Path(script).name}"
        for option in options:
            command_line_example = f"{command_line_example} {option}"
        command_line_example = f"{command_line_example}\n"

        script_message_file.write(command_line_example)
        script_message_file.write(stdout.decode('utf-8'))

# -- Project Variables -------------------------------------------------------
rst_prolog = f'.. |project| replace:: {project}\n.. include:: targets.txt'

# -- General configuration ---------------------------------------------------
# Add custom style sheet to make the html docs wider
def setup(app):
    app.add_css_file('custom.css')

# Add any Sphinx extension module names here, as strings.
extensions = ['sphinx.ext.autodoc', 'sphinxcontrib.bibtex', 'sphinx.ext.extlinks', 'sphinxarg.ext']

bibtex_bibfiles = ['references.bib']

# Links to PRs, Jira issues.
extlinks = {
     "merge": ("https://re-git.lanl.gov/kbrindley/scons-simulation/-/merge_requests/%s", "MERGE-"),
     "issue": ("https://re-git.lanl.gov/kbrindley/scons-simulation/-/issues/%s", "ISSUE-"),
}

templates_path = ['_templates']
source_suffix = ['.rst']
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# -- Options for HTML output -------------------------------------------------
html_theme = 'sphinx_rtd_theme'
html_static_path = ['_static']
