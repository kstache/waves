#! /usr/bin/env python

import os
import pathlib

# Inherit the parent construction environment
Import(['env', 'project_substitution_dictionary'])
project_dir = pathlib.Path(env['project_dir'])

# VVV Sphinx prototypes
# TODO: boostrap from waves.scons_extensions.sphinx_scanner *after* the function is deployed on conda-forge
# DO NOT 'bootstrap' by importing the current/repository version of WAVES. That's not bootstrapping, it's a bug factory
import re
import SCons.Scanner
def sphinx_scanner():
    suffixes = ['.rst', '.txt']
    flags = re.MULTILINE
    expression = re.compile(r'^\s*\.\. (?:include|literalinclude|figure|bibliography)::\s*(.+)$', flags)
    def suffix_only(node_list):
        return [node for node in node_list if node.path.endswith(tuple(suffixes))]
    def regex_scan(node, env, path):
        contents = node.get_text_contents()
        includes = expression.findall(contents)
        includes = [file.strip() for file in includes]
        return includes
    custom_scanner = SCons.Scanner.Scanner(function=regex_scan, skeys=suffixes, recursive=suffix_only)
    return custom_scanner


def sphinx_build(program="sphinx-build", options="", builder="html", tags=""):
    sphinx_builder = Builder(
        action=["${program} ${options} -b ${builder} ${TARGET.dir.dir.abspath} ${TARGET.dir.abspath} ${tags}"],
        program=program,
        options=options,
        builder=builder,
        tags=tags
    )
    return sphinx_builder


def sphinx_latexpdf(program="sphinx-build", options="", builder="latexpdf", tags=""):
    sphinx_latex = SCons.Builder.Builder(
        action=["${program} -M ${builder} ${TARGET.dir.dir.abspath} ${TARGET.dir.dir.abspath} ${tags} ${options}"],
        program=program,
        options=options,
        builder=builder,
        tags=tags
    )
    return sphinx_latex
# ^^^ Sphinx prototypes


env.Append(SCANNERS=sphinx_scanner())
env.Append(BUILDERS={
    "SphinxBuild": sphinx_build(program=env["sphinx_build"], options="-W"),
    "SphinxPDF": sphinx_latexpdf(program=env["sphinx_build"], options="-W")
})

# Perform variable substitution on Sphinx configuration file
env.Substfile(
    "conf.py.in",
    SUBST_DICT=project_substitution_dictionary
)

# Copy root directory files into documentation build directory
copy_files = (
    ("README.txt", "#/README.rst"),
    ("CITATION.bib", "#/CITATION.bib"),
    ("LICENSE.txt", "#/LICENSE.txt"),
    ("environment.yml", "#/environment.yml")
)
for target, source in copy_files:
    Command(
        target=target,
        source=source,
        action=Copy("$TARGET", "$SOURCE")
    )

# Explicit Sphinx documentation dependency list
sphinx_configuration_source_list = [
    'conf.py',  # Generated by an SCons target
    # Not strictly required for all Sphinx build types, so not always found by the scanner.
    # It is required for Sphinx configuration, so it needs to be explicitly included in the deps list.
    'CITATION.bib',  # Copied from CITATION.bib to docs build directory by root SConscript
    'references.bib',
    'environment.yml',  # Copied from environment.yml to docs build directory by root SConscript
    'targets.txt',  # Found in conf.py, which is not currently scanned
    '_static/waves_logo_brandmark_smaller.png',  # Found in conf.py, which is not currently scanned
    'waves_logo_primary_large_crop.png',  # Found in conf.py, which is not currently scanned
    "favicon.ico",  # Found in conf.py, which is not currently scanned
    '_static/custom.css',
    '_static/custom.js',
    '_static/wave.svg'
]

documentation_file_list = [
    'tutorial_api.rst',
    'tutorial_cli.rst',
    'api.rst',
    'internal_api.rst',
    'changelog.rst',
    'citation.rst',
    'license.rst',
    'cli.rst',
    'computational_practices_introduction.rst',
    'computational_practices_version_control.rst',
    'computational_practices_documentation.rst',
    'computational_practices_build_system.rst',
    'computational_practices_compute_environment.rst',
    'computational_practices_regression_testing.rst',
    'computational_practices_archival.rst',
    'devops.rst',
    'glossary.rst',
    'index.rst',
    'release_philosophy.rst',
    'scons_quickstart.rst',
    'scons_multiactiontask.rst',
    'abstract.rst',
    'installation.rst',
    'tutorial_introduction.rst',
    'tutorial_quickstart.rst',
    'tutorial_core.rst',
    'tutorial_supplemental.rst',
    'tutorial_wip.rst',
    'templates.rst',
    'tutorial_00_scons.rst',
    'tutorial_01_geometry.rst',
    'tutorial_02_partition_mesh.rst',
    'tutorial_argparse_types.rst',
    'tutorial_03_solverprep.rst',
    'tutorial_04_simulation.rst',
    'tutorial_05_parameter_substitution.rst',
    'tutorial_06_include_files.rst',
    'tutorial_07_cartesian_product.rst',
    'tutorial_07_latin_hypercube.rst',
    'tutorial_07_sobol_sequence.rst',
    'tutorial_extend_study.rst',
    'tutorial_08_data_extraction.rst',
    'tutorial_09_post_processing.rst',
    'tutorial_sensitivity_study.rst',
    'tutorial_10_unit_testing.rst',
    'tutorial_11_regression_testing.rst',
    'tutorial_12_archival.rst',
    'tutorial_setuptools_scm.rst',
    'tutorial_cubit_abaqus.rst',
    'tutorial_cubit_sierra.rst',
    'tutorial_cubit_fierro.rst',
    'tutorial_quinoa.rst',
    'tutorial_mesh_convergence.rst',
    'tutorial_escape_sequences.rst',
    'tutorial_remote_execution.rst',
    'tutorial_sbatch.rst',
    'tutorial_task_reuse.rst',
    'tutorial_part_image.rst',
    'waves_quickstart.rst',
    'tutorial_abaqus_cae.rst',
    'zreferences.rst',
]

# Copy tutorial files to the build/docs directory
tutorials_dir = project_dir / pathlib.Path(env['tutorials_dir'])
tutorial_files_list = [
    tutorials_dir / 'tutorial_00_SConstruct',
    tutorials_dir / 'tutorial_01_geometry',
    tutorials_dir / 'tutorial_01_geometry_SConstruct',
    tutorials_dir / 'tutorial_02_partition_mesh',
    tutorials_dir / 'tutorial_02_partition_mesh_SConstruct',
    tutorials_dir / 'tutorial_argparse_types',
    tutorials_dir / 'tutorial_argparse_types_SConstruct',
    tutorials_dir / 'tutorial_03_solverprep',
    tutorials_dir / 'tutorial_03_solverprep_SConstruct',
    tutorials_dir / 'tutorial_04_simulation',
    tutorials_dir / 'tutorial_04_simulation_SConstruct',
    tutorials_dir / 'tutorial_05_parameter_substitution',
    tutorials_dir / 'tutorial_05_parameter_substitution_SConstruct',
    tutorials_dir / 'tutorial_06_include_files',
    tutorials_dir / 'tutorial_06_include_files_SConstruct',
    tutorials_dir / 'tutorial_07_cartesian_product',
    tutorials_dir / 'tutorial_07_cartesian_product_SConstruct',
    tutorials_dir / 'tutorial_07_latin_hypercube',
    tutorials_dir / 'tutorial_07_latin_hypercube_SConstruct',
    tutorials_dir / 'tutorial_07_sobol_sequence',
    tutorials_dir / 'tutorial_07_sobol_sequence_SConstruct',
    tutorials_dir / 'tutorial_08_data_extraction',
    tutorials_dir / 'tutorial_08_data_extraction_SConstruct',
    tutorials_dir / 'tutorial_09_post_processing',
    tutorials_dir / 'tutorial_09_post_processing_SConstruct',
    tutorials_dir / 'tutorial_10_unit_testing_SConstruct',
    tutorials_dir / 'tutorial_11_regression_testing',
    tutorials_dir / 'tutorial_11_regression_testing_SConstruct',
    tutorials_dir / 'tutorial_12_archival',
    tutorials_dir / 'tutorial_12_archival_SConstruct',
    tutorials_dir / 'tutorial_sensitivity_study',
    tutorials_dir / 'tutorial_sensitivity_study_SConstruct',
    tutorials_dir / 'tutorial_setuptools_scm_SConstruct',
    tutorials_dir / 'tutorial_escape_sequences',
    tutorials_dir / 'tutorial_escape_sequences_SConstruct',
    tutorials_dir / 'tutorial_extend_study',
    tutorials_dir / 'tutorial_extend_study_SConstruct',
    tutorials_dir / 'tutorial_mesh_convergence',
    tutorials_dir / 'tutorial_mesh_convergence_SConstruct',
    tutorials_dir / 'tutorial_remote_execution',
    tutorials_dir / 'tutorial_remote_execution_SConstruct',
    tutorials_dir / 'tutorial_sbatch',
    tutorials_dir / 'tutorial_sbatch_SConstruct',
    tutorials_dir / 'tutorial_task_reuse',
    tutorials_dir / 'tutorial_task_reuse_SConstruct',
    tutorials_dir / 'tutorial_part_image',
    tutorials_dir / 'tutorial_part_image_SConstruct',
    tutorials_dir / 'unit_testing',
    tutorials_dir / 'rectangle_geometry_partition.scons',
    tutorials_dir / 'rectangle_mesh_solverprep_solve_extract.scons',
    tutorials_dir / 'gitignore',
    tutorials_dir / 'pyproject.toml',
    tutorials_dir / env['abaqus_dir'] / 'rectangle_geometry.py',
    tutorials_dir / env['abaqus_dir'] / 'rectangle_partition.py',
    tutorials_dir / env['abaqus_dir'] / 'rectangle_mesh.py',
    tutorials_dir / env['abaqus_dir'] / 'abaqus_utilities.py',
    tutorials_dir / env['abaqus_dir'] / 'export_abaqus_image.py',
    tutorials_dir / env['abaqus_dir'] / 'rectangle_compression.inp',
    tutorials_dir / env['abaqus_dir'] / 'assembly.inp',
    tutorials_dir / env['abaqus_dir'] / 'boundary.inp',
    tutorials_dir / env['abaqus_dir'] / 'field_output.inp',
    tutorials_dir / env['abaqus_dir'] / 'history_output.inp',
    tutorials_dir / env['abaqus_dir'] / 'materials.inp',
    tutorials_dir / env['abaqus_dir'] / 'parts.inp',
    tutorials_dir / env['abaqus_dir'] / 'rectangle_compression.inp.in',
    tutorials_dir / env['argparse_types_dir'] / 'rectangle_geometry.py',
    tutorials_dir / env['argparse_types_dir'] / 'rectangle_partition.py',
    tutorials_dir / env['argparse_types_dir'] / 'rectangle_mesh.py',
    tutorials_dir / env['cubit_dir'] / 'rectangle_geometry.py',
    tutorials_dir / env['cubit_dir'] / 'rectangle_partition.py',
    tutorials_dir / env['cubit_dir'] / 'rectangle_mesh.py',
    tutorials_dir / env['modsim_dir'] / 'argparse_types.py',
    tutorials_dir / env['python_dir'] / 'rectangle_compression_nominal.py',
    tutorials_dir / env['python_dir'] / 'rectangle_compression_cartesian_product.py',
    tutorials_dir / env['python_dir'] / 'rectangle_compression_cartesian_product.csv',
    tutorials_dir / env['python_dir'] / 'rectangle_compression_latin_hypercube.py',
    tutorials_dir / env['python_dir'] / 'rectangle_compression_sobol_sequence.py',
    tutorials_dir / env['python_dir'] / 'rectangle_compression_sensitivity_study.py',
    tutorials_dir / env['python_dir'] / 'rectangle_compression_mesh_convergence.py',
    tutorials_dir / env['python_dir'] / 'mesh_convergence_stress.yaml',
    tutorials_dir / env['python_dir'] / 'post_processing.py',
    tutorials_dir / env['python_dir'] / 'sensitivity_study.py',
    tutorials_dir / env['tests_dir'] / 'test_post_processing.py',
    tutorials_dir / "tutorial_cubit/cubit",
    tutorials_dir / "tutorial_cubit/abaqus",
    tutorials_dir / "tutorial_cubit/sierra",
    tutorials_dir / "tutorial_cubit/SConstruct",
    tutorials_dir / "tutorial_cubit/modsim_package/sierra/rectangle_compression.i",
    tutorials_dir / "tutorial_quinoa/SConstruct",
    tutorials_dir / "tutorial_quinoa/SConscript",
    tutorials_dir / "tutorial_quinoa/box.py",
    tutorials_dir / "tutorial_quinoa/flow.q",
    tutorials_dir / "tutorial_fierro/SConstruct",
    tutorials_dir / "tutorial_fierro/example_input",
    tutorials_dir / "tutorial_fierro/example_input.yaml",
    tutorials_dir / "waves_quickstart/SConscript",
    tutorials_dir / "tutorial_abaqus_cae/SConscript",
    tutorials_dir / "tutorial_abaqus_cae/submit_cae.py",
    tutorials_dir / 'scons_quickstart/SConscript',
    tutorials_dir / 'multi_action_task/SConscript',
]
copied_file_list = []
for file_path in tutorial_files_list:
    target = f'{file_path.parts[-2]}_{file_path.name}'
    Command(
        target=target,
        source=str(file_path),
        action=Copy("$TARGET", "$SOURCE")
    )
    copied_file_list.append(target)
source_files = sphinx_configuration_source_list + documentation_file_list + copied_file_list

html_targets = [f"{pathlib.Path(source).with_suffix('.html')}" for source in documentation_file_list if source.endswith(".rst")]
html_directory = "html"
html_target = [f"{html_directory}/{target}" for target in html_targets]
html = env.SphinxBuild(
    target=html_target,
    source=source_files,
    builder="html"
)
env.Clean(html, [Dir(html_directory)] + documentation_file_list)
env.Alias(html_directory, html)

# TODO: Combine the two html build logic
internal_directory = "html-internal"
internal_target = [f"{internal_directory}/{target}" for target in html_targets]
internal = env.SphinxBuild(
    target=internal_target,
    source=source_files,
    builder="html",
    tags="-t aea"
)
env.Clean(internal, [Dir(internal_directory)] + documentation_file_list)
env.Alias(internal_directory, internal)

waves_pdf = pathlib.Path(f"latex/{project_substitution_dictionary['@documentation_pdf@']}")
latex_directory = "latex"
latex_target = [str(waves_pdf)]
latexpdf = env.SphinxPDF(
    target=latex_target,
    source=source_files
)
env.Clean(latexpdf, [Dir(latex_directory)] + documentation_file_list)
env.Alias('latexpdf', latexpdf)

man_directory = "man"
man_target = [f"{man_directory}/waves.1"]
man_source = [
    "man_index.rst",
    "ssh_builder_actions_warning.txt"  # Required by ``ssh_builder_actions`` docstring and not found in man_index.rst
]
man = env.SphinxBuild(
    target=man_target,
    source=man_source + sphinx_configuration_source_list,
    builder="man",
    tags="-t man"
)
env.Clean(man, [Dir(man_directory)] + documentation_file_list)
env.Alias(man_directory, man)

# TODO: Depends on ``imagemagick`` package, which isn't part of the CI environment yet
epub_cover = "waves_epub_cover.png"
env.Command(
    target=[f"epub/_static/{epub_cover}"],
    source=[str(waves_pdf)],
    action=["convert -density 300 ${SOURCE.abspath}[0] ${TARGET.abspath}"]
)

waves_epub = waves_pdf.with_suffix(".epub").name
epub_directory = "epub"
epub_target = [f"{epub_directory}/{waves_epub}"]
epub = env.SphinxBuild(
    target=epub_target,
    source=source_files + [f"epub/_static/{epub_cover}"],
    builder="epub"
)
env.Clean(epub, [Dir(epub_directory)] + documentation_file_list)
env.Alias(epub_directory, epub)

# Collector alias to build all documentation and regression
env.Alias('documentation', html + latexpdf + man)
env.Alias('regression', html + latexpdf + man + internal)

if not env['unconditional_build'] and not env['sphinx_build']:
    print(f"Program 'sphinx-build' was not found in construction environment. Ignoring Sphinx target(s)")
    Ignore(['.', html_directory, 'html'], html)
    Ignore(['.', internal_directory, 'html-internal'], internal)
    Ignore(['.', latex_directory, 'latexpdf'], latexpdf)
    Ignore(['.', man_directory, 'man'], man)
    Ignore(['.', epub_directory, 'epub'], epub)
