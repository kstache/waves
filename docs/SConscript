#! /usr/bin/env python

import pathlib

# Inherit the parent construction environment
Import(['env', 'project_substitution_dictionary'])
project_dir = pathlib.Path(env['project_dir'])
build_wrapper = project_dir / env['build_wrapper']

# Set empty alias return list
alias_list = []

# Perform variable substitution on Sphinx configuration file
env.Substfile(
    "conf.py.in",
    SUBST_DICT=project_substitution_dictionary)

# Generate the shell script usage message
env.Command(
    target=['waves_build_wrapper_message.txt'],
    source=[str(build_wrapper)],
    action=[
        f"echo -e '$$ {build_wrapper.stem} -h' > ${{TARGET.abspath}}",
        f"{build_wrapper} -h >> ${{TARGET.abspath}}"])

# Explicit Sphinx documentation dependency list
documentation_file_list = [
    'conf.py',  # Generated by an SCons target
    'README.txt',  # Copied from README.rst to docs build directory by root SConscript
    'environment.txt',  # Copied from environment.txt to docs build directory by root SConscript
    'eabm_tutorial_00_SConstruct',  # Copied from the eabm directory to docs build directory by this SConscript
    'waves_build_wrapper_message.txt',  # Created in docs build directory by this SConscript
    'eabm_README.txt',   # Copied from the eabm directory to waves docs build directory by root SConscript
    'eabm_api.rst',
    'eabm_cli.rst',
    'api.rst',
    'build.txt',
    'changelog.rst',
    'cli.rst',
    'computational_practices_introduction.rst',
    'computational_practices_version_control.rst',
    'computational_practices_documentation.rst',
    'computational_practices_build_system.rst',
    'computational_practices_compute_environment.rst',
    'computational_practices_regression_testing.rst',
    'computational_practices_continuous_integration.rst',
    'contribution.txt',
    'dependencies.txt',
    'devops.rst',
    'documentation.txt',
    'index.rst',
    'line_number_jump_note.txt',
    'project_brief.txt',
    'quickstart.rst',
    'references.bib',
    'release_philosophy.rst',
    'targets.txt',
    'tutorial_introduction.rst',
    'tutorial_00_prerequisites.txt',
    'tutorial_00_scons.rst',
    'tutorial_01_geometry_waves.rst',
    'tutorial_02_partition_mesh_waves.rst',
    'tutorial_03_solverprep_waves.rst',
    'tutorial_04_simulation_waves.rst',
    'tutorial_05_parameter_substitution_waves.rst',
    'tutorial_06_include_files_waves.rst',
    'tutorial_07_cartesian_product_waves.rst',
    'tutorial_environment_activation.txt',
    'waves_logo_brandmark_smaller.png',
    'zreferences.rst',
    '_static/custom.css'
]

# Copy tutorial files to the build/docs directory
eabm_dir = project_dir / pathlib.Path(env['eabm_dir'])
tutorial_01_dir = pathlib.Path(env['tutorial_01_dir'])
tutorial_02_dir = pathlib.Path(env['tutorial_02_dir'])
tutorial_03_dir = pathlib.Path(env['tutorial_03_dir'])
tutorial_04_dir = pathlib.Path(env['tutorial_04_dir'])
tutorial_05_dir = pathlib.Path(env['tutorial_05_dir'])
tutorial_06_dir = pathlib.Path(env['tutorial_06_dir'])
tutorial_07_dir = pathlib.Path(env['tutorial_07_dir'])
abaqus_dir = pathlib.Path(env['abaqus_dir'])
python_dir = pathlib.Path(env['python_dir'])
tutorial_files_list = [
    eabm_dir / 'tutorial_00_SConstruct',
    eabm_dir / 'quickstart_SConstruct',
    eabm_dir / 'tutorial_01_geometry_SConstruct',
    eabm_dir / 'tutorial_02_partition_mesh_SConstruct',
    eabm_dir / 'tutorial_03_solverprep_SConstruct',
    eabm_dir / 'tutorial_04_simulation_SConstruct',
    eabm_dir / 'tutorial_05_parameter_substitution_SConstruct',
    eabm_dir / 'tutorial_06_include_files_SConstruct',
    eabm_dir / 'tutorial_07_cartesian_product_SConstruct',
    eabm_dir / tutorial_01_dir / 'SConscript',
    eabm_dir / tutorial_02_dir / 'SConscript',
    eabm_dir / tutorial_03_dir / 'SConscript',
    eabm_dir / tutorial_04_dir / 'SConscript',
    eabm_dir / tutorial_05_dir / 'SConscript',
    eabm_dir / tutorial_06_dir / 'SConscript',
    eabm_dir / tutorial_07_dir / 'SConscript',
    eabm_dir / 'SConstruct',
    eabm_dir / abaqus_dir / 'single_element_geometry.py',
    eabm_dir / abaqus_dir / 'single_element_partition.py',
    eabm_dir / abaqus_dir / 'single_element_mesh.py',
    eabm_dir / abaqus_dir / 'abaqus_journal_utilities.py',
    eabm_dir / abaqus_dir / 'single_element_compression.inp',
    eabm_dir / abaqus_dir / 'single_element_compression.inp.in',
    eabm_dir / python_dir / 'single_element_compression_nominal.py',
    eabm_dir / python_dir / 'tutorial_07_cartesian_product.py'
]
for file_path in tutorial_files_list:
    target = f'{file_path.parts[-2]}_{file_path.name}'
    Command(target=target,
            source=str(file_path),
            action=Copy("$TARGET", "$SOURCE"))
    documentation_file_list.append(target)

# TODO: os agnostic pathsep for the html directory
# https://re-git.lanl.gov/aea/python-projects/waves/-/issues/4
sphinx_options = '-W'
html = env.Command(
    target=[Dir('html')],
    source=documentation_file_list,
    action=f"{env['sphinx_build']} ${{sphinx_options}} -b html ${{TARGET.dir.abspath}} ${{TARGET.dir.abspath}}/html",
    sphinx_options=sphinx_options)
env.Clean(html, Dir('html'))
env.AlwaysBuild(html)
alias_list.extend(env.Alias('html', html))

latexpdf = env.Command(
    target=[Dir('latex')],
    source=documentation_file_list,
    action=f"{env['sphinx_build']} -M latexpdf ${{TARGET.dir.abspath}} ${{TARGET.dir.abspath}}")
env.Clean(latexpdf, Dir('latex'))
env.AlwaysBuild(latexpdf)
alias_list.extend(env.Alias('latexpdf', latexpdf))

man = env.Command(
    target=[Dir('man')],
    source=documentation_file_list,
    action=f"{env['sphinx_build']} ${{sphinx_options}} -b man ${{TARGET.dir.abspath}} ${{TARGET.dir.abspath}}/man",
    sphinx_options=sphinx_options)
env.Clean(man, Dir('man'))
env.AlwaysBuild(man)
alias_list.extend(env.Alias('man', man))

# Collector alias to build all documentation
alias_list.extend(env.Alias('documentation', html + latexpdf + man))

if not env['unconditional_build'] and not env['sphinx_build']:
    print(f"Program 'sphinx-build' was not found in construction environment. Ignoring Sphinx target(s)")
    Ignore(['.', 'html', 'html'], html)
    Ignore(['.', 'latex', 'latexpdf'], latexpdf)
    Ignore(['.', 'man', 'man'], man)

# Return the alias list to SConstruct for help message output
Return('alias_list')
