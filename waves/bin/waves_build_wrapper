#! /usr/bin/env bash

script_name=$(basename "$0")
usage="${script_name}
USAGE: ./${script_name} [TARGET [TARGET...]] [-hdvg] [-p BUILD_TEMPLATE]"
options='OPTIONS:
    TARGET             Name of the SCons target(s) to build. If no targets are
                       provided, print the usage and exit (DEFAULT: None)
    -h                 Show this help message and exit
    -d                 Print CLI debugging information and exit
                       (DEFAULT: false)
    -v                 Verbose output. Currently implemented as the ``set -x``
                       bash option.
    -g                 Perform a full local git clone operation from the PWD
                       using the current repository state. Will build to the
                       SCons project default build sub-directory under the
                       template directory.
                       ``git clone --no-hardlinks ${PWD} ${BUILD_TEMPLATE}``
    -p BUILD_TEMPLATE  Absolute or relative path to create as a build
                       directory without a trailing slash. Will be appended
                       as ``${BUILD_TEMPLATE}.XXXXXX`` for use in ``mktemp``
                       command to create a unique build directory with every
                       execution (DEFAULT: build).

NOTE: SCons project must define and use the ``--build-dir`` project command
line option for non-git builds. Otherwise the ``mktemp`` directory will be
unused.

SCons command construction without ``-g``:
    ``scons --build-dir=${build_directory} ${targets}``

SCons command construction with ``-g``:
    ``scons ${targets}``'

#=========================================================== PARSE ARGUMENTS ===
# Set default options
debug='false'
verbose='false'
verbose_flag='-v'
git_clone='false'
declare -a target
target_array=('')
build_template='build'

# Set internal variables

# Parse mix of positional and flag arguments with getopts
declare -a positional
while [ $# -gt 0 ]; do
    unset OPTIND
    unset OPTARG
    while getopts ":hgdvtp:" opt; do
        case $opt in
            h)
                printf "%s\n" "${usage}"
                printf "%s\n" "${options}"
                exit 0
                ;;
            d)
                debug='true'
                ;;
            v)
                verbose='true'
                verbose_flag='-v'
                ;;
            g)
                git_clone='true'
                ;;
            p)
                build_template=${OPTARG}
                ;;
            \?)
                printf "%s\n" "Invalid option: -${OPTARG}"
                invalid_option='true'
                ;;
            :)
                printf "%s\n" "Option -${OPTARG} requires an argument."
                invalid_option='true'
                ;;
        esac
    done
    # Shift past last processed getopts valid arg
    shift $((OPTIND-1))
    # Shift past double dash
    [ "${1:-}" = "--" ] && shift
    # Assign non getopts arg to positional array
    positional+=($1)
    shift
done

# Exit on invalid argument flags
if [ "${invalid_option}" == 'true' ]; then
    printf "%s\n" "${usage}"
    printf "%s\n" "${options}"
    exit 1
fi

# Check for optional positional arguments
if [ ! ${#positional[@]} -eq 0 ]; then
    target_array=("${positional[@]}")
else
    printf "%s\n" "${usage}"
    exit 0
fi

#================================================== CONTINUED INTERNAL SETUP ===
set -Eeuo pipefail

# Convert targets array to space separated string of targets
targets=$(echo ${target_array[@]} | tr -d ',')

# Append mktemp template
build_template="${build_template}.XXXXXX"

# Try to find the SCons executable
if [[ "$(command -v scons)" ]]; then
    scons_program='scons'
fi

# Print debugging information
if [ "${debug}" == 'true' ] || [ "${verbose}" == 'true' ]; then
    echo "TARGETS        = ${targets}"
    echo "BUILD_TEMPLATE = ${build_template}"
    echo "SCons command  = ${scons_program}"
    echo "verbose        = ${verbose}"
    echo "verbose_flag   = ${verbose_flag}"
    echo "git_clone      = ${git_clone}"
fi

# Exit for debugging flag
if [ "${debug}" == 'true' ]; then
    exit 0
fi

# Set bash "verbose" script execution
if [ "${verbose}" == 'true' ]; then
    set -x
fi

#============================================================= DO THE THINGS ===
original_directory=${PWD}
build_directory=$(mktemp -d ${build_template})
build_directory=$(realpath ${build_directory})
if [ "${git_clone}" == 'true' ]; then
    git clone --no-hardlinks ${original_directory} ${build_directory}
    cd ${build_directory}
    ${scons_program} ${targets}
fi
${scons_program} --build-dir=${build_directory} ${targets}
cd ${original_directory}
