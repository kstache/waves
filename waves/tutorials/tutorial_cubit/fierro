#! /usr/bin/env python
"""Rectangle compression workflow: Fierro solve

Requires the following ``SConscript(..., exports=[])``

* ``env`` - The SCons construction environment with the following required keys

  * ``fierro_source_abspath`` - String absolute path to the project's Fierro journal files
  * ``unconditional_build`` - Boolean flag to force building of conditionally ignored targets
  * ``cubit`` - String path for the Cubit executable
"""

import pathlib

# Inherit the parent construction environment
Import("env")

# Set project-wide paths with os-agnostic path separators
fierro_source_abspath = env["fierro_source_abspath"]

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
workflow_name = build_directory.name
model = "rectangle"

# Collect the target nodes to build a concise alias for all targets
workflow = []

element_type = "SHELL"
solver = "sierra"
SConscript("cubit", exports=["env", "element_type", "solver"], duplicate=False)

# Convert mesh file type for Fierro
env.PythonScript(
    target=[f"{model}_mesh.vtk"],
    source=[fierro_source_abspath / "convert_to_vtk2ascii.py", f"{model}_mesh.g"],
    script_options="--input-format=exodus $SOURCE.abspath $TARGET.abspath"
)

# SolverPrep
fierro_source_list = [
    fierro_source_abspath / "rectangle_compression.yaml"
]
fierro_source_list = [pathlib.Path(source_file) for source_file in fierro_source_list]
workflow.extend(env.CopySubstfile(fierro_source_list))

# Fierro Solve
solve_source_list = [source_file.name for source_file in fierro_source_list]
solve_source_list.append(f"{model}_mesh.vtk")
workflow.extend(env.FierroImplicit(
    target=["rectangle_compression.stdout"],
    source=solve_source_list
))

# Collector alias based on parent directory name
env.Alias(workflow_name, workflow)

if not env['unconditional_build'] and not env['fierro']:
    print(f"Program 'fierro' was not found in construction environment. Ignoring '{workflow_name}' target(s)")
    Ignore(['.', workflow_name], workflow)
