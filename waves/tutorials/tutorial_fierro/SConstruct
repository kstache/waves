#! /usr/bin/env python

import os
import pathlib
import inspect

import waves


# Accept command line options with fall back default values
AddOption(
    "--build-dir",
    dest="variant_dir_base",
    default="build",
    nargs=1,
    type="string",
    action="store",
    metavar="DIR",
    help="SCons build (variant) root directory. Relative or absolute path. (default: '%default')"
)
AddOption(
    "--unconditional-build",
    dest="unconditional_build",
    default=False,
    action="store_true",
    help="Boolean flag to force building of conditionally ignored targets, e.g. if the target's action program is missing" \
            " and it would normally be ignored. (default: '%default')"
)
AddOption(
    "--print-build-failures",
    dest="print_build_failures",
    default=False,
    action="store_true",
    help="Print task *.stdout target file(s) on build failures. (default: '%default')"
)
AddOption(
    "--mpi-processes",
    dest="mpi_processes",
    default=1,
    nargs=1,
    type="int",
    action="store",
    metavar="N",
    help="Run the Fierro Solve task using N MPI processes. (default: '%default')"
)

# Inherit user's full environment and set project options
env = Environment(
    ENV=os.environ.copy(),
    variant_dir_base=GetOption("variant_dir_base"),
    unconditional_build=GetOption("unconditional_build"),
    print_build_failures=GetOption("print_build_failures"),
    mpi_processes=GetOption("mpi_processes")
)

# Conditionally print failed task *.stdout files
waves.scons_extensions.print_build_failures(env["print_build_failures"])

# Find required programs for conditional target ignoring and absolute path for use in target actions
env["mpirun"] = waves.scons_extensions.add_program(["mpirun"], env)
env["fierro"] = waves.scons_extensions.add_program(["fierro-parallel-explicit"], env)

# Set project internal variables and variable substitution dictionaries
project_configuration = pathlib.Path(inspect.getfile(lambda: None))
project_dir = project_configuration.parent
project_name = project_dir.name
project_variables = {
    "project_configuration": project_configuration,
    "project_dir": project_dir,
    "project_name": project_name,
}
for key, value in project_variables.items():
    env[key] = value

# Build path object for extension and re-use
variant_dir_base = pathlib.Path(env["variant_dir_base"])

# Add Fierro builder
env.Append(BUILDERS={
    "FierroExplicit": waves.scons_extensions.fierro_explicit(mpirun_options="-np $(${mpi_processes}$)")
})

# Add simulation targets
workflow_configurations = [
    "example_input"
]
for workflow in workflow_configurations:
    build_dir = variant_dir_base / workflow
    SConscript(workflow, variant_dir=build_dir, exports="env", duplicate=True)

# Add default target list to help message
env.Default()  # Empty defaults list to avoid building all simulation targets by default
# Add aliases to help message so users know what build target options are available
# This must come *after* all expected Alias definitions and SConscript files.
waves.scons_extensions.project_help_message()
