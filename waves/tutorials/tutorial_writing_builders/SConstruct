#! /usr/bin/env python
import os
import pathlib

import waves

import scons_extensions


AddOption(
    "--build-dir",
    dest="variant_dir_base",
    default="build",
    nargs=1,
    type="string",
    action="store",
    metavar="DIR",
    help="SCons build (variant) root directory. Relative or absolute path. (default: '%default')"
)
AddOption(
    "--solve-cpus",
    dest="solve_cpus",
    default=1,
    nargs=1,
    type="int",
    action="store",
    metavar="N",
    help="Run the solver task using N CPUs. (default: '%default')"
)

env = Environment(
    ENV=os.environ.copy(),
    variant_dir_base=GetOption("variant_dir_base"),
    solve_cpus=GetOption("solve_cpus"),
)
env.AddMethod(waves.scons_extensions.project_help_message, "ProjectHelp")
env.AddMethod(waves.scons_extensions.add_program, "AddProgram")

# Conditionally print failed task *.stdout files
waves.scons_extensions.print_build_failures()

# Empty defaults list to avoid building all simulation targets by default
env.Default()

# Add project builders and scanners
solver_executable = pathlib.Path("solver.py").resolve()
env["solver"] = env.AddProgram([solver_executable])
env.Append(BUILDERS={
    "Solver": scons_extensions.solver_builder_factory(
        subcommand_options="$(--solve-cpus=${solve_cpus}$)"
    )
})

# Build path object for extension and re-use
variant_dir_base = pathlib.Path(env["variant_dir_base"])

# Add simulation targets
workflow_configurations = [
    "pytest",
    "implicit_workflow"
]
for workflow in workflow_configurations:
    build_dir = variant_dir_base / workflow
    SConscript(workflow, variant_dir=build_dir, exports="env", duplicate=False)

# Print project local help
env.ProjectHelp()
