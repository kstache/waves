#! /usr/bin/env python

import os
import sys
import pathlib
import inspect

import waves

# Accept command line options with fall back default values
AddOption(
    "--build-dir",
    dest="variant_dir_base",
    default="build",
    nargs=1,
    type="string",
    action="store",
    metavar="DIR",
    help="SCons build (variant) root directory. Relative or absolute path. (default: '%default')"
)
AddOption(
    "--ignore-documentation",
    dest="ignore_documentation",
    default=False,
    action="store_true",
    help="Boolean to ignore the documentation build, e.g. during Conda package build and testing. Unaffected by the " \
         "'--unconditional-build' option. (default: '%default')"
)
AddOption(
    "--solve-cpus",
    dest="solve_cpus",
    default=1,
    nargs=1,
    type="int",
    action="store",
    metavar="N",
    help="Run the Abaqus Solve task using N CPUs. (default: '%default')"
)
AddOption(
    "--print-build-failures",
    dest="print_build_failures",
    default=False,
    action="store_true",
    help="Print task *.stdout target file(s) on build failures. (default: '%default')"
)

# Inherit user's full environment and set project options
env = waves.scons_extensions.WAVESEnvironment(
    ENV=os.environ.copy(),
    variant_dir_base=GetOption("variant_dir_base"),
    ignore_documentation=GetOption("ignore_documentation"),
    solve_cpus=GetOption("solve_cpus"),
    print_build_failures=GetOption("print_build_failures"),
    TARFLAGS="-c -j",
    TARSUFFIX=".tar.bz2"
)

# Conditionally print failed task *.stdout files
env.PrintBuildFailures(print_stdout=env["print_build_failures"])

# Empty defaults list to avoid building all simulation targets by default
env.Default()

# Set project internal variables and variable substitution dictionaries
project_configuration = pathlib.Path(inspect.getfile(lambda: None))
project_dir = project_configuration.parent
project_name = project_dir.name
version = "0.1.0"
author_list = [
    "Kyle Brindley",
    "Prabhu S. Khalsa",
    "Thomas Roberts",
    "Sergio Cordova",
    "Matthew Fister",
    "Scott Ouellette"
]
author_latex = r" \and ".join(author_list)
latex_project_name = project_name.replace("_", "-")
documentation_source_dir = pathlib.Path("docs")
modsim_package_dir = pathlib.Path("modsim_package")
test_source_dir = "modsim_package/tests"
project_variables = {
    "project_configuration": project_configuration,
    "project_dir": project_dir,
    "project_name": project_name,
    "version": version,
    "author_list": author_list,
    "author_latex": author_latex,
    "documentation_pdf": f"{latex_project_name}-{version}.pdf",
    "report_pdf": f"{latex_project_name}-{version}-report.pdf",
    "documentation_abspath": project_dir / documentation_source_dir,
    "modsim_package_abspath": project_dir / modsim_package_dir,
    'test_source_abspath': project_dir / test_source_dir,
    "datacheck_alias": "datacheck",
    "regression_alias": "regression"
}
for key, value in project_variables.items():
    env[key] = value

# Make the modsim package importable for: (1) SConscript files and (2) Python and Abaqus Python environments
sys.path.insert(0, str(project_dir))
env.PrependENVPath("PYTHONPATH", project_dir)

# Build path object for extension and re-use
variant_dir_base = pathlib.Path(env["variant_dir_base"])

# Find required programs for conditional target ignoring and absolute path for use in target actions
env["sphinx_build"] = env.AddProgram(["sphinx-build"])
env["ABAQUS_PROGRAM"] = env.AddProgram(["/apps/abaqus/Commands/abq2023", "abq2023"])

# Add WAVES builders and scanners
env.Append(BUILDERS={
    "AbaqusExtract": waves.scons_extensions.abaqus_extract(program=env["ABAQUS_PROGRAM"]),
    "CondaEnvironment": waves.scons_extensions.conda_environment(),
    "SphinxBuild": waves.scons_extensions.sphinx_build(program=env["sphinx_build"], options="-W"),
    "SphinxPDF": waves.scons_extensions.sphinx_latexpdf(program=env["sphinx_build"], options="-W")
})
env.Append(SCANNERS=waves.scons_extensions.sphinx_scanner())
env.Append(SCANNERS=waves.scons_extensions.abaqus_input_scanner())

# Dump the Conda environment as documentation of as-built target environment
environment_target = env.CondaEnvironment(
    target=[variant_dir_base / "environment.yaml"],
    source=[]
)
env.AlwaysBuild(environment_target)
Default(environment_target)

# Add documentation target(s)
if not env["ignore_documentation"]:
    # Project documentation
    build_dir = variant_dir_base / documentation_source_dir
    SConscript(documentation_source_dir / "SConscript", variant_dir=build_dir, exports={"env": env, "project_variables": project_variables})

    # Analysis report
    report_dir = pathlib.Path("report")
    build_dir = variant_dir_base / report_dir
    SConscript(
        report_dir / "SConscript",
        variant_dir=build_dir,
        exports={"env": env, "project_variables": project_variables},
        duplicate=True
    )
else:
    print(f"The 'ignore_documentation' option was set to 'True'. Skipping documentation SConscript file(s)")

# Add simulation targets
workflow_configurations = [
    "nominal",
    "mesh_convergence"
]
for workflow in workflow_configurations:
    build_dir = variant_dir_base / workflow
    workflow_file = modsim_package_dir / workflow
    SConscript(workflow_file, variant_dir=build_dir, exports={"env": env}, duplicate=True)

# Add unit test target
test_workflow = 'unit_testing'
test_build_dir = variant_dir_base / test_workflow
SConscript(test_workflow, variant_dir=test_build_dir, exports={"env": env}, duplicate=False)

# Add default target list to help message
# Add aliases to help message so users know what build target options are available
# This must come *after* all expected Alias definitions and SConscript files.
env.ProjectHelp()
