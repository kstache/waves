#! /usr/bin/env python
"""Rectangle compression workflow

Requires the following ``SConscript(..., exports={})``

* ``env`` - The SCons construction environment with the following required keys

  * ``modsim_package_abspath`` - String absolute path to the project package
  * ``solve_cpus`` - Number of cpus to use in Abaqus solve task
  * ``datacheck_alias`` - String for the alias collecting the datacheck workflow targets
  * ``regression_alias`` - String for the alias collecting the regression workflow targets
  * ``abaqus`` - String path for the Abaqus executable

* ``simulation_variables`` - The current simulation parameter set
"""

# Inherit the parent construction environment
Import("env", "simulation_variables", "workflow_name")

# Set project-wide paths with os-agnostic path separators
modsim_package_abspath = env["modsim_package_abspath"]

# Collect the target nodes to build concise target alias(es)
artifacts = []
datacheck = []
images = []

# SolverPrep
artifacts.extend(env.CopySubstfile(
    [modsim_package_abspath / "rectangle_compression.inp.in"],
    substitution_dictionary=env.SubstitutionSyntax(simulation_variables)
))

# Part images
images.extend(env.AbaqusJournal(
    target=["rectangle_compression.png"],
    source=["export_abaqus_image.py", "rectangle_compression.inp"],
    journal_options="--input-file ${SOURCES[1].abspath} --output-file ${TARGET.file} "
                    "--model-name ${model} --part-name ${model}",
    model="rectangle"
))

# Abaqus Solve
datacheck_name = "rectangle_compression_DATACHECK"
datacheck_suffixes = ("023", "mdl", "sim", "stt")
abaqus_options="-double both"
datacheck.extend(env.AbaqusSolver(
    target=[f"{datacheck_name}.{suffix}" for suffix in datacheck_suffixes],
    source=["rectangle_compression.inp"],
    job_name=datacheck_name,
    abaqus_options=f"{abaqus_options} -datacheck"
))

artifacts.extend(env.AbaqusSolver(
    target=["rectangle_compression.sta"],
    source=["rectangle_compression.inp"],
    job_name="rectangle_compression",
    abaqus_options="${global_abaqus_options} -cpus $(${solve_cpus}$)",
    global_abaqus_options=abaqus_options,
    solve_cpus=env["solve_cpus"]
))

# Abaqus Extract
extract_source_list = ["rectangle_compression.odb"]
artifacts.extend(env.AbaqusExtract(
    target=["rectangle_compression.h5"],
    source=extract_source_list
))

# Collector alias based on build directory name
env.Alias(env["regression_alias"], datacheck)
env.Alias(env["datacheck_alias"], datacheck)
env.Alias(f"{workflow_name}_datacheck", datacheck)
env.Alias("images", images)

if not env["abaqus"]:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{workflow_name}' target(s)")
    Ignore([".", workflow_name], datacheck)

Return("artifacts")
