#! /usr/bin/env python
"""Rectangle compression workflow

Requires the following ``SConscript(..., exports={})``

* ``env`` - The SCons construction environment with the following required keys

  * ``modsim_package_abspath`` - String absolute path to the project package
  * ``solve_cpus`` - Integer number of cpus to use in the Abaqus solve task
  * ``datacheck_alias`` - String for the alias collecting the datacheck workflow targets
  * ``regression_alias`` - String for the alias collecting the regression workflow targets
  * ``abaqus`` - String path for the Abaqus executable
"""

import pathlib

import waves

from modsim_package import rectangle_compression

# Inherit the parent construction environment
Import("env")

# Set project-wide paths with os-agnostic path separators
modsim_package_abspath = env["modsim_package_abspath"]

# Simulation variables
build_directory = pathlib.Path(Dir(".").abspath)
workflow_name = build_directory.name
workflow_configuration = [env["project_configuration"], workflow_name]
simulation_variables = rectangle_compression.nominal()

# Collect the target nodes to build concise target alias(es)
artifacts = []
workflow = []

# Rectangle part
artifacts.extend(SConscript("rectangle", exports={"env": env, "simulation_variables": simulation_variables}))

# Rectangle compression simulation
artifacts.extend(SConscript(
    "rectangle_compression",
    exports={"env": env, "simulation_variables": simulation_variables, "workflow_name": workflow_name}
))

# Post-processing
plot_name = "stress_strain_comparison"
regression_file = modsim_package_abspath / f"{workflow_name}_{plot_name}.csv"
post_processing_source = ["rectangle_compression_datasets.h5"]
script_options = "--input-file ${post_processing_source}"
script_options += f" --output-file ${{TARGET.file}} --x-units 'mm/mm' --y-units 'MPa'"
script_options += f" --csv-regression-file {regression_file}"
workflow.extend(env.PythonScript(
    target=[f"{plot_name}.pdf", f"{plot_name}.csv"],
    source=[modsim_package_abspath / "post_processing.py", regression_file] + post_processing_source,
    subcommand_options=script_options,
    post_processing_source=post_processing_source
))

# Data archival
artifacts.extend(workflow)
archive_name = f"{env['project_name']}-{workflow_name}-{env['version']}"
archive_target = env.Tar(
    target=archive_name,
    source=artifacts + workflow_configuration
)

# Collector alias based on build directory name
env.Alias(workflow_name, workflow)
env.Alias(f"{workflow_name}_archive", archive_target)

if not env["ABAQUS_PROGRAM"]:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{workflow_name}' target(s)")
    Ignore([".", workflow_name], workflow)
