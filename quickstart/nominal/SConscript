#! /usr/bin/env python

import pathlib

import waves

from eabm_package import single_element_compression

# Inherit the parent construction environment
Import(["env", "project_variables"])

# Set project-wide paths with os-agnostic path separators
eabm_package_dir = env["eabm_package_dir"]
eabm_package_abspath = pathlib.Path(env["eabm_package_abspath"])

# Simulation variables
model = "single_element"
simulation_variables = single_element_compression.nominal

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []
report = []

# Geometry
journal_file = f"{model}_geometry"
journal_options = f"--width {simulation_variables['width']} --height {simulation_variables['height']}"
workflow.extend(env.AbaqusJournal(
    target=[f"{journal_file}.cae", f"{journal_file}.jnl"],
    source=[f"{eabm_package_abspath / journal_file}.py"],
    journal_options=journal_options))

# Partition
journal_file = f"{model}_partition"
journal_options = f"--width {simulation_variables['width']} --height {simulation_variables['height']}"
workflow.extend(env.AbaqusJournal(
    target=[f"{journal_file}.cae", f"{journal_file}.jnl"],
    source=[f"{eabm_package_abspath / journal_file}.py", f"{model}_geometry.cae"],
    journal_options=journal_options))

# Mesh
journal_file = f"{model}_mesh"
journal_options = f"--global-seed {simulation_variables['global_seed']}"
workflow.extend(env.AbaqusJournal(
    target=[f"{journal_file}.cae", f"{journal_file}.jnl", f"{journal_file}.inp"],
    source=[f"{eabm_package_abspath / journal_file}.py", f"{model}_partition.cae"],
    journal_options=journal_options))

# SolverPrep
abaqus_source_list = [
    f"#/{eabm_package_dir}/{model}_compression.inp.in",
    f"#/{eabm_package_dir}/amplitudes.inp",
    f"#/{eabm_package_dir}/assembly.inp",
    f"#/{eabm_package_dir}/boundary.inp",
    f"#/{eabm_package_dir}/field_output.inp",
    f"#/{eabm_package_dir}/materials.inp",
    f"#/{eabm_package_dir}/parts.inp",
    f"#/{eabm_package_dir}/history_output.inp"
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
workflow.extend(waves.builders.copy_substitute(
    abaqus_source_list,
    substitution_dictionary=waves.builders.substitution_syntax(simulation_variables)))

# Abaqus Solve
solve_source_list = [source_file.name.rstrip('.in') for source_file in abaqus_source_list]
solve_source_list.append([f"{journal_file}.inp"])
job_name = pathlib.Path(solve_source_list[0]).with_suffix('')
datacheck_name = f"{job_name}_DATACHECK"
datacheck_suffixes = ('023', 'mdl', 'sim', 'stt')
abaqus_options='-double both'
datacheck.extend(env.AbaqusSolver(
    target=[f"{datacheck_name}.{suffix}" for suffix in datacheck_suffixes],
    source=solve_source_list,
    job_name=datacheck_name,
    abaqus_options=f'{abaqus_options} -datacheck'))

workflow.extend(env.AbaqusSolver(
    target=[f"{job_name}.sta"],
    source=solve_source_list,
    job_name=job_name,
    abaqus_options=abaqus_options))

# Abaqus Extract
extract_source_list = [f"{job_name}.odb"]
workflow.extend(env.AbaqusExtract(
    target=[f"{job_name}.h5"],
    source=extract_source_list))

# Post-processing
plot_name = "stress_strain_comparison.pdf"
post_processing_source = [f"{job_name}_datasets.h5"]
script_options = "--input-file " + " ".join(str(path) for path in post_processing_source)
script_options += f" --output-file {plot_name} --x-units 'mm/mm' --y-units 'MPa'"
workflow.extend(env.PythonScript(
    target=[plot_name],
    source=[str(eabm_package_abspath / "plot_scatter.py")] + post_processing_source,
    script_options=script_options))

# PDF Report
report_source_list = ["index.rst", plot_name]
report_copy_list = [
    f"#/{env['documentation_dir']}/nominal.rst",
    f"#/{env['documentation_dir']}/project_brief.txt",
    f"#/{env['documentation_dir']}/zreferences.rst",
    f"#/{env['documentation_dir']}/references.bib",
    f"#/{env['documentation_dir']}/targets.txt",
    f"#/{env['documentation_dir']}/simulation_description.txt",
    f"#/{env['documentation_dir']}/simulation_material.txt",
    f"#/{env['documentation_dir']}/nominal_conclusions.txt"
]
report_copy_list = [pathlib.Path(source_file) for source_file in report_copy_list]
report_source_list = report_source_list + [source_file.name.rstrip('.in') for source_file in report_copy_list]
report.extend(waves.builders.copy_substitute(
    report_copy_list,
    substitution_dictionary=waves.builders.substitution_syntax(simulation_variables)))
report.extend(env.Substfile(
    "conf.py.in",
    SUBST_DICT=waves.builders.substitution_syntax(project_variables)))
report_directory = Dir("latex")
report.extend(env.Command(
    target=[report_directory],
    source=report_source_list,
    action=f"{env['sphinx_build']} -M latexpdf ${{TARGET.dir.abspath}} ${{TARGET.dir.abspath}}"))
env.Clean(report, report_directory)

# Collector alias(es) based on parent directory name
parent_directory = Dir(".").srcnode().name
env.Alias(parent_directory, workflow)
env.Alias(f"{parent_directory}_datacheck", datacheck)
env.Alias(f"{parent_directory}_report", report)
env.Alias(env["datacheck_alias"], datacheck)

if not env["abaqus"]:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{parent_directory}' target(s)")
    Ignore([".", parent_directory], workflow)
    Ignore([".", parent_directory], datacheck)
