#! /usr/bin/env python

import os
import sys
import pathlib

import setuptools_scm
# Only required when WAVES is not installed as a package, e.g. for local testing in WAVES repository.
try:
    import waves
except ModuleNotFoundError:
    sys.path.insert(0, str(pathlib.Path('..').resolve()))
    import waves

version = '0.1.0'

# Accept command line variables with fall back default values
variables = Variables(None, ARGUMENTS)
variables.AddVariables(
    PathVariable('variant_dir_base',
        help='SCons variant (build) root directory. Relative or absolute path.',
        default='build',
        validator=PathVariable.PathAccept),
    BoolVariable('conditional_ignore',
        help="Boolean to conditionally ignore targets, e.g. if the action's program is missing.",
        default=True))

# Inherit user's full environment and set project variables
env = Environment(ENV=os.environ.copy(),
                  variables=variables)

# Find required programs for conditional target ignoring and absolute path for use in target actions
required_programs = ['abaqus']
conf = env.Configure()
for program in required_programs:
    env[program.replace('-', '_')] = conf.CheckProg(program)
conf.Finish()

# Add project command line variable options to help message
Help(variables.GenerateHelpText(env))

# Set project internal variables and variable substitution dictionaries
project_name = 'WAVES-EABM-TUTORIAL'
project_variables = {
    'project_name': project_name,
    'project_dir': Dir('.').abspath,
    'version': version,
    'abaqus_source_dir': 'eabm_package/abaqus'
}
for key, value in project_variables.items():
    env[key] = value

# Build path object for extension and re-use
variant_dir_base = pathlib.Path(env['variant_dir_base'])

# Add custom builders
env.Append(BUILDERS={'AbaqusJournal': waves.builders.abaqus_journal(abaqus_program=env['abaqus']),
                     'AbaqusSolver': waves.builders.abaqus_solver(abaqus_program=env['abaqus'])})

# Add simulation targets
eabm_simulation_directories = [
    'tutorial_01_geometry',
    'tutorial_02_partition_mesh',
    'tutorial_03_solverprep',
    'tutorial_04_simulation',
    'tutorial_05_parameter_substitution'
]
for source_dir in eabm_simulation_directories:
    build_dir = variant_dir_base / source_dir
    SConscript(dirs=source_dir, variant_dir=build_dir, exports='env', duplicate=False)

# Add default target list to help message
env.Default()  # Empty defaults list to avoid building all simulation targets by default
default_targets_help = "\nDefault Targets:\n"
for target in DEFAULT_TARGETS:
    default_targets_help += f"    {str(target)}\n"
Help(default_targets_help)

# Add aliases to help message so users know what build target options are available
# TODO: recover alias list from SCons variable instead of constructing manually
# https://re-git.lanl.gov/kbrindley/waves/-/issues/33
alias_list = eabm_simulation_directories
alias_help = "\nTarget Aliases:\n"
for alias in alias_list:
    alias_help += f"    {alias}\n"
Help(alias_help)
