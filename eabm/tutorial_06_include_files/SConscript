#! /usr/bin/env python

import pathlib

import waves

# Inherit the parent construction environment
Import('env')

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(env['project_dir'])
abaqus_source_dir = env['abaqus_source_dir']
abaqus_source_abspath = project_dir / abaqus_source_dir
python_source_dir = env['python_source_dir']
python_source_abspath = project_dir / python_source_dir
parameters_file = python_source_abspath / 'single_element_compression_nominal.py'

from eabm_package.python import single_element_compression_nominal

# Simulation variables
model = "single_element"
simulation_variables = single_element_compression_nominal.simulation_variables
simulation_substitution_dictionary = single_element_compression_nominal.simulation_substitution_dictionary

# Collect the target nodes to build a concise alias for all targets
workflow = []

# Geometry
journal_file = f"{model}_geometry"
journal_options = f"--width {simulation_variables['width']} --height {simulation_variables['height']}"
workflow.extend(env.AbaqusJournal(
    target=[f"{journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py", str(parameters_file)],
    journal_options=journal_options))

# Partition
journal_file = f"{model}_partition"
journal_options = f"--width {simulation_variables['width']} --height {simulation_variables['height']}"
workflow.extend(env.AbaqusJournal(
    target=[f"{journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py", f"{model}_geometry.cae", str(parameters_file)],
    journal_options=journal_options))

# Mesh
journal_file = f"{model}_mesh"
journal_options = f"--global-seed {simulation_variables['global_seed']}"
workflow.extend(env.AbaqusJournal(
    target=[f"{journal_file}.cae", f"{journal_file}.inp"],
    source=[f"{abaqus_source_abspath / journal_file}.py", f"{model}_partition.cae", str(parameters_file)],
    journal_options=journal_options))

# SolverPrep
abaqus_source_list = [
    f"#/{abaqus_source_dir}/{model}_compression.inp.in",
    f"#/{abaqus_source_dir}/amplitudes.inp",
    f"#/{abaqus_source_dir}/assembly.inp",
    f"#/{abaqus_source_dir}/boundary.inp",
    f"#/{abaqus_source_dir}/field_output.inp",
    f"#/{abaqus_source_dir}/materials.inp",
    f"#/{abaqus_source_dir}/parts.inp",
    f"#/{abaqus_source_dir}/history_output.inp"
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
workflow.extend(waves.builders.copy_substitute(abaqus_source_list,
                                               substitution_dictionary=simulation_substitution_dictionary))

# Abaqus Solve
solve_source_list = [source_file.name.rstrip('.in') for source_file in abaqus_source_list]
solve_source_list.append([f"{journal_file}.inp"])
solve_source_list.append([str(parameters_file)])
job_name = pathlib.Path(solve_source_list[0]).with_suffix('')
datacheck_name = f"{job_name}_DATACHECK"
datacheck_suffixes = ('023', 'mdl', 'sim', 'stt')
abaqus_options='-double both'
workflow.extend(env.AbaqusSolver(
    target=[f"{datacheck_name}.{suffix}" for suffix in datacheck_suffixes],
    source=solve_source_list,
    job_name=datacheck_name,
    abaqus_options=f'{abaqus_options} -datacheck'))

solve_source_list.append([f"{datacheck_name}.odb"])
workflow.extend(env.AbaqusSolver(
    target=[f"{job_name}.sta"],
    source=solve_source_list,
    job_name=job_name,
    abaqus_options=abaqus_options))

# Collector alias based on parent directory name
parent_directory = Dir('.').srcnode().name
env.Alias(parent_directory, workflow)

if env['conditional_ignore'] and not env['abaqus']:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{parent_directory}' target(s)")
    Ignore(['.', parent_directory], workflow)
