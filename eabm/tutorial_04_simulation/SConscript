#! /usr/bin/env python

import pathlib

# Inherit the parent construction environment
Import('env')

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(env['PROJECT_DIR'])
abaqus_source_dir = env['ABAQUS_SOURCE_DIR']
abaqus_source_abspath = project_dir / abaqus_source_dir

# Simulation variables
model = "single_element"

# Geometry
journal_file = f"{model}_geometry"
journal_options = ""
geometry = env.AbaqusJournal(
    target=[f"{journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py"],
    journal_options=journal_options)

# Partition
journal_file = f"{model}_partition"
journal_options = ""
partition = env.AbaqusJournal(
    target=[f"{journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py", f"{model}_geometry.cae"],
    journal_options=journal_options)

# Mesh
journal_file = f"{model}_mesh"
journal_options = ""
mesh = env.AbaqusJournal(
    target=[f"{journal_file}.cae", f"{journal_file}.inp"],
    source=[f"{abaqus_source_abspath / journal_file}.py", f"{model}_partition.cae"],
    journal_options=journal_options)

# SolverPrep
abaqus_source_list = [
    f"#/{abaqus_source_dir}/{model}_compression.inp",
    f"#/{abaqus_source_dir}/amplitudes.inp",
    f"#/{abaqus_source_dir}/assembly.inp",
    f"#/{abaqus_source_dir}/boundary.inp",
    f"#/{abaqus_source_dir}/field_output.inp",
    f"#/{abaqus_source_dir}/materials.inp",
    f"#/{abaqus_source_dir}/parts.inp",
    f"#/{abaqus_source_dir}/history_output.inp"
]
abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
# TODO: Write copy/substitute function that accepts a list of strings or pathlib.Path objects
# https://re-git.lanl.gov/kbrindley/scons-simulation/-/issues/28
solverprep = list()
for source_file in abaqus_source_list:
    # Copy all files in list to build directory without changing extension
    solverprep.append(
        Command(
            target=source_file.name,
            source=str(source_file),
            action=Copy('${TARGET}', '${SOURCE}')))
    # Run substitution dictionary on anything with *.in template extension
    if source_file.suffix == '.in':
        solverprep.append(Substfile(source_file.name))

# Abaqus Solve
solve_source_list = [source_file.name.rstrip('.in') for source_file in abaqus_source_list]
solve_source_list.append([f"{journal_file}.inp"])
job_name = pathlib.Path(solve_source_list[0]).with_suffix('')
datacheck_name = f"{job_name}_DATACHECK"
abaqus_options='-double both'
datacheck = env.AbaqusSolver(
    target=[],
    source=solve_source_list,
    job_name=datacheck_name,
    abaqus_options=f'{abaqus_options} -datacheck')

solve_source_list.append([f"{datacheck_name}.odb"])
solve = env.AbaqusSolver(
    target=[],
    source=solve_source_list,
    job_name=job_name,
    abaqus_options=abaqus_options)

# Collector alias based on parent directory name
parent_directory = pathlib.Path('.').parent.name
workflow = geometry + partition + mesh + solverprep + datacheck + solve
env.Alias(parent_directory, workflow)
