#! /usr/bin/env python

import pathlib

# Inherit the parent construction environment
Import('env')

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(env['PROJECT_DIR'])
abaqus_source_abspath = project_dir / env['ABAQUS_SOURCE_DIR']

# Simulation variables
model = "single_element"

# Geometry
journal_file = f"{model}_geometry"
journal_options = ""
geometry = env.AbaqusJournal(
    target=[f"{journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py"],
    journal_options=journal_options)

# Partition
journal_file = f"{model}_partition"
journal_options = ""
partition = env.AbaqusJournal(
    target=[f"{journal_file}.cae"],
    source=[f"{abaqus_source_abspath / journal_file}.py", f"{model}_geometry.cae"],
    journal_options=journal_options)

# Mesh
journal_file = f"{model}_mesh"
journal_options = ""
mesh = env.AbaqusJournal(
    target=[f"{journal_file}.cae", f"{journal_file}.inp"],
    source=[f"{abaqus_source_abspath / journal_file}.py", f"{model}_partition.cae"],
    journal_options=journal_options)

# SolverPrep
abaqus_input_template_list = [
    # The root input file MUST be first for the AbaqusSolver Builder
    abaqus_source_abspath / "single_element_compression.inp.in",
    abaqus_source_abspath / "amplitudes.inp.in",
    abaqus_source_abspath / "assembly.inp.in",
    abaqus_source_abspath / "boundary.inp.in",
    abaqus_source_abspath / "field_output.inp.in",
    abaqus_source_abspath / "materials.inp.in",
    abaqus_source_abspath / "parts.inp.in",
    abaqus_source_abspath / "history_output.inp.in"
]
abaqus_input_list = [abaqus_input.with_suffix('') for abaqus_input in abaqus_input_template_list]
solverprep = list()
for template_file, input_file in zip(abaqus_input_template_list, abaqus_input_list):
    solverprep.append(Substfile(str(template_file)))
    solverprep.append(
        Command(
            target=input_file.name,
            source=str(input_file),
# This AlwaysBuild means that the build/**/*.inp files are always re-created and moved.
# It's required because the Substfile command will find it's targets missing and re-run, but Move will not re-run,
# leaving build output in the source directory. Fortunately, the md5sum checking of SCons prevents this from always
# triggering downstream targets.
# TODO: Find another way to avoid creating files in the source directory with Substfile
# https://re-git.lanl.gov/kbrindley/scons-simulation/-/issues/16
            action=Copy('${TARGET}', '${SOURCE}')))
env.AlwaysBuild(solverprep)

# Abaqus Solve
# TODO: Add a datacheck simulation
# https://re-git.lanl.gov/kbrindley/scons-simulation/-/issues/30
job_name = 'single_element_compression'
abaqus_options = ''
abaqus_input_names = [abaqus_input.name for abaqus_input in abaqus_input_list]
abaqus_input_names.append(f"{journal_file}.inp")
solve = env.AbaqusSolver(
    target=[],
    source=abaqus_input_names,
    job_name=job_name,
    abaqus_options=abaqus_options)

# Collector alias
env.Alias('${SOURCE_DIR.srcdir}', [geometry, partition, mesh, solve] + solverprep)
