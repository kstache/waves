#! /usr/bin/env python

import copy
import pathlib

import waves

from eabm_package.python.single_element_compression_sobol_sequence import parameter_schema

# Inherit the parent construction environment
Import('env')

# Comment used in tutorial code snippets: marker-1

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(env['project_dir'])
abaqus_source_dir = env['abaqus_source_dir']
abaqus_source_abspath = project_dir / abaqus_source_dir
python_source_dir = env['python_source_dir']
python_source_abspath = project_dir / python_source_dir

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
output_file_type = "h5"
parameter_study_file = build_directory / f"parameter_study.{output_file_type}"
previous_parameter_study = str(parameter_study_file) if parameter_study_file.exists() else None
model = "single_element"
simulation_constants = {
    'global_seed': 1,
    'displacement': -1
}
kwargs = {'scramble': False}

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []

# Comment used in tutorial code snippets: marker-2

# Parameter Study with Sobol Sequence
parameter_generator = waves.parameter_generators.SobolSequence(
    parameter_schema,
    output_file=parameter_study_file,
    output_file_type=output_file_type,
    previous_parameter_study=previous_parameter_study)
parameter_generator.generate(kwargs=kwargs)
parameter_study = parameter_generator.parameter_study

semaphore_filename = "semaphore.txt"
semaphore_file_list = []

# Comment used in tutorial code snippets: marker-3

# Parameterized targets must live inside current simulation_variables for loop
for set_name, parameters in parameter_generator.parameter_study.sel(data_type='samples').groupby('parameter_sets'):
    set_name = pathlib.Path(set_name)
    simulation_variables = {**parameters.squeeze().to_array().to_series().to_dict(), **simulation_constants}

    semaphore_file = build_directory / set_name / semaphore_filename
    semaphore_file_list.append(semaphore_file)
    semaphore_file.parent.mkdir(parents=True, exist_ok=True)
    if not semaphore_file.exists():
        with open(semaphore_file, 'w') as semaphore:
            semaphore.write(f"{set_name.name}\n")

    # Comment used in tutorial code snippets: marker-4

    # Geometry
    journal_file = f"{model}_geometry"
    journal_options = f"--width {simulation_variables['width']} --height {simulation_variables['height']}"
    workflow.extend(env.AbaqusJournal(
        target=[f"{set_name / journal_file}.cae",
                f"{set_name / journal_file}.jnl"],
        source=[f"{abaqus_source_abspath / journal_file}.py"],
        journal_options=journal_options))

    # Partition
    journal_file = f"{model}_partition"
    journal_options = f"--width {simulation_variables['width']} --height {simulation_variables['height']}"
    workflow.extend(env.AbaqusJournal(
        target=[f"{set_name / journal_file}.cae",
                f"{set_name / journal_file}.jnl"],
        source=[f"{abaqus_source_abspath / journal_file}.py",
                f"{set_name / model}_geometry.cae"],
        journal_options=journal_options))

    # Mesh
    journal_file = f"{model}_mesh"
    journal_options = f"--global-seed {simulation_variables['global_seed']}"
    workflow.extend(env.AbaqusJournal(
        target=[f"{set_name / journal_file}.cae",
                f"{set_name / journal_file}.jnl",
                f"{set_name / journal_file}.inp"],
        source=[f"{abaqus_source_abspath / journal_file}.py",
                f"{set_name / model}_partition.cae"],
        journal_options=journal_options))

    # SolverPrep
    abaqus_source_list = [
        f"#/{abaqus_source_dir}/{model}_compression.inp.in",
        f"#/{abaqus_source_dir}/amplitudes.inp",
        f"#/{abaqus_source_dir}/assembly.inp",
        f"#/{abaqus_source_dir}/boundary.inp",
        f"#/{abaqus_source_dir}/field_output.inp",
        f"#/{abaqus_source_dir}/materials.inp",
        f"#/{abaqus_source_dir}/parts.inp",
        f"#/{abaqus_source_dir}/history_output.inp"
    ]
    abaqus_source_list = [pathlib.Path(source_file) for source_file in abaqus_source_list]
    workflow.extend(waves.builders.copy_substitute(
        abaqus_source_list,
        substitution_dictionary=waves.builders.substitution_syntax(simulation_variables),
        build_subdirectory=set_name))

# Comment used in tutorial code snippets: marker-5

    # Abaqus Solve
    solve_source_list = [f"{set_name / source_file.name.rstrip('.in')}" for source_file in abaqus_source_list]
    solve_source_list.append([f"{set_name / journal_file}.inp"])
    job_name = pathlib.Path(solve_source_list[0]).with_suffix('').name
    datacheck_name = f"{job_name}_DATACHECK"
    datacheck_suffixes = ('023', 'mdl', 'sim', 'stt')
    abaqus_options='-double both'
    datacheck.extend(env.AbaqusSolver(
        target=[f"{set_name / datacheck_name}.{suffix}" for suffix in datacheck_suffixes],
        source=solve_source_list,
        job_name=datacheck_name,
        abaqus_options=f'{abaqus_options} -datacheck'))

    workflow.extend(env.AbaqusSolver(
        target=[f"{set_name / job_name}.sta"],
        source=solve_source_list,
        job_name=job_name,
        abaqus_options=abaqus_options))

# Comment used in tutorial code snippets: marker-6

def write_parameter_study(target, source, env):
    """`SCons Python build function`_ wrapper for the parameter generator's write() function.

    Reference: https://scons.org/doc/production/HTML/scons-user/ch17s04.html
    """
    set_count = len(source)
    if set_count < 8:
        new_schema = copy.deepcopy(parameter_schema)
        new_schema['num_simulations'] = set_count + 2
        new_generator = waves.parameter_generators.SobolSequence(
            new_schema,
            output_file=parameter_study_file,
            output_file_type=output_file_type)
        new_generator.generate(kwargs=kwargs)
        new_generator.write()
    else:
        parameter_generator.write()
    return None

workflow.extend(env.Command(
    target=[parameter_study_file.name],
    source=[str(semaphore) for semaphore in semaphore_file_list],
    action=[write_parameter_study],
    parameter_generator=parameter_generator))

# Collector alias based on parent directory name
parent_directory = Dir('.').srcnode().name
env.Alias(parent_directory, workflow)
env.Alias(f"{parent_directory}_datacheck", datacheck)

if not env['unconditional_build'] and not env['abaqus']:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{parent_directory}' target(s)")
    Ignore(['.', parent_directory], workflow)
