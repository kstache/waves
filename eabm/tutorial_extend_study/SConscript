#! /usr/bin/env python

import pathlib

import numpy
import waves

from eabm_package.python.tutorial_extend_study import parameter_schema

# Inherit the parent construction environment
Import('env')

# Comment used in tutorial code snippets: marker-1

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(env['project_dir'])
abaqus_source_dir = env['abaqus_source_dir']
abaqus_source_abspath = project_dir / abaqus_source_dir
python_source_dir = env['python_source_dir']
python_source_abspath = project_dir / python_source_dir

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
output_file_type = "h5"
parameter_study_file = build_directory / f"parameter_study.{output_file_type}"
previous_parameter_study = str(parameter_study_file) if parameter_study_file.exists() else None
model = "single_element"

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []

# Comment used in tutorial code snippets: marker-2

# Parameter Study with CustomStudy
parameter_generator = waves.parameter_generators.CustomStudy(
    parameter_schema,
    output_file=parameter_study_file,
    output_file_type=output_file_type,
    previous_parameter_study=previous_parameter_study)
parameter_generator.generate()
parameter_study = parameter_generator.parameter_study

semaphore_filename = "semaphore.txt"
semaphore_file_list = []

# Comment used in tutorial code snippets: marker-3

# Parameterized targets must live inside current simulation_variables for loop
for set_name, parameters in parameter_generator.parameter_study.sel(data_type='samples').groupby('parameter_sets'):
    set_name = pathlib.Path(set_name)
    simulation_variables = parameters.squeeze().to_array().to_series().to_dict()

    semaphore_file = build_directory / set_name / semaphore_filename
    semaphore_file_list.append(semaphore_file)
    semaphore_file.parent.mkdir(parents=True, exist_ok=True)
    if not semaphore_file.exists():
        with open(semaphore_file, 'w') as semaphore:
            semaphore.write(f"{set_name.name}\n")

    # Comment used in tutorial code snippets: marker-4

def write_parameter_study(target, source, env):
    """`SCons Python build function`_ wrapper for the parameter generator's write() function.

    Reference: https://scons.org/doc/production/HTML/scons-user/ch17s04.html
    """
    set_count = len(source)
    if set_count < 4:
        new_set_value = set_count + 1.
        samples = env['parameter_generator']._samples
        new_set = numpy.array([[new_set_value, new_set_value, new_set_value]])
        samples = numpy.append(samples, new_set, axis=0)
        new_schema = {
            "parameter_samples": samples,
            "parameter_names": env['parameter_generator'].parameter_schema['parameter_names']
        }
        new_generator = waves.parameter_generators.CustomStudy(
            new_schema,
            output_file=parameter_study_file,
            output_file_type=output_file_type)
        new_generator.generate()
        new_generator.write()
    else:
        parameter_generator.write()
    return None

workflow.extend(env.Command(
    target=[parameter_study_file.name],
    source=[str(semaphore) for semaphore in semaphore_file_list],
    action=[write_parameter_study],
    parameter_generator=parameter_generator))

# Collector alias based on parent directory name
parent_directory = Dir('.').srcnode().name
env.Alias(parent_directory, workflow)
env.Alias(f"{parent_directory}_datacheck", datacheck)
env.Alias(env['datacheck_alias'], datacheck)

if not env['unconditional_build'] and not env['abaqus']:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{parent_directory}' target(s)")
    Ignore(['.', parent_directory], workflow)
