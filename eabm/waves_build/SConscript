#! /usr/bin/env python

import pathlib

import numpy
import waves

from eabm_package.python.waves_build import parameter_schema

# Inherit the parent construction environment
Import('env')

# Comment used in tutorial code snippets: marker-1

# Set project-wide paths with os-agnostic path separators
project_dir = pathlib.Path(env['project_dir'])
python_source_dir = env['python_source_dir']
python_source_abspath = project_dir / python_source_dir

# Simulation variables
build_directory = pathlib.Path(Dir('.').abspath)
output_file_type = "h5"
parameter_study_file = build_directory / f"parameter_study.{output_file_type}"
previous_parameter_study = str(parameter_study_file) if parameter_study_file.exists() else None
model = "single_element"

# Collect the target nodes to build a concise alias for all targets
workflow = []
datacheck = []

# Comment used in tutorial code snippets: marker-2

# Parameter Study with CustomStudy
parameter_generator = waves.parameter_generators.CustomStudy(
    parameter_schema,
    output_file=parameter_study_file,
    output_file_type=output_file_type,
    previous_parameter_study=previous_parameter_study)
parameter_generator.generate()
parameter_study = parameter_generator.parameter_study

def write_parameter_study(target, source, env):
    """`SCons Python build function`_ wrapper for the parameter generator's write() function.

    Reference: https://scons.org/doc/production/HTML/scons-user/ch17s04.html
    """
    parameter_generator.write()
    return None

# Comment used in tutorial code snippets: marker-3

# Parameterized targets must live inside current simulation_variables for loop
for set_name, parameters in parameter_generator.parameter_study.sel(data_type='samples').groupby('parameter_sets'):
    set_name = pathlib.Path(set_name)
    simulation_variables = parameters.squeeze().to_array().to_series().to_dict()

    output_file_task = env.Command(
        target=[str(set_name / "echo.txt")],
        source=['touch.txt.in'],
        action=[f"cd ${{TARGET.dir.abspath}} && {env['echo']} ${{TARGET.name}} > ${{TARGET.name}}"])
    workflow.extend(output_file_task)

compile_output_task = env.Command(
    target=["all.txt"],
    source=[output_file_task],
    action=["cd ${TARGET.dir.abspath} && cat parameter_set?/echo.txt > ${TARGET.name}"])
workflow.extend(compile_output_task)

parameter_study_task = env.Command(
    target=[parameter_study_file.name],
    source=[compile_output_task],
    action=[write_parameter_study])
workflow.extend(parameter_study_task)

# Collector alias based on parent directory name
parent_directory = Dir('.').srcnode().name
env.Alias(parent_directory, workflow)
env.Alias(f"{parent_directory}_datacheck", datacheck)
env.Alias(env['datacheck_alias'], datacheck)

if not env['unconditional_build'] and not env['echo']:
    print(f"Program 'abaqus' was not found in construction environment. Ignoring '{parent_directory}' target(s)")
    Ignore(['.', parent_directory], workflow)
