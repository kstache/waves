#! /usr/bin/env python

import os
import sys
import pathlib

import setuptools_scm
# Only required when WAVES is not installed as a package, e.g. for local testing in SCons-simulation repository.
try:
    import waves
except ModuleNotFoundError:
    sys.path.insert(0, str(pathlib.Path('..').resolve()))
    import waves

try:
    version = setuptools_scm.get_version(root='..')
# Only required for SCons-EABM in the SCons-simulation repository.
# Most EABMs only need ``setuptools_scm.get_version()`` to find their version number.
except LookupError:
    from waves import _version
    version = _version.version

# Accept command line variables with fall back default values
variables = Variables(None, ARGUMENTS)
variables.Add(
    PathVariable('variant_dir_base',
        help='SCons variant (build) root directory. Relative or absolute path.',
        default='build',
        validator=PathVariable.PathAccept))

# Inherit user's full environment and set project variables
env = Environment(ENV=os.environ.copy(),
                  variables=variables)

# Add project command line variable options to help message
Help(variables.GenerateHelpText(env))

# Set project internal variables and variable substitution dictionaries
project_name = 'SCons-EABM'
documentation_source_dir = 'docs'
project_variables = {
    'project_name': project_name,
    'project_dir': Dir('.').abspath,
    'version': version,
    'abaqus_source_dir': 'abaqus',
}
project_substitution_dictionary = dict()
for key, value in project_variables.items():
    env[key] = value
    project_substitution_dictionary[f"@{key}@"] = value

# Build path object for extension and re-use
variant_dir_base = pathlib.Path(env['variant_dir_base'])

# Add custom builders
env.Append(BUILDERS={'AbaqusJournal': waves.builders.abaqus_journal(),
                     'AbaqusSolver': waves.builders.abaqus_solver(),
                     'CopySubstitute': waves.builders.copy_substitute()})

# Add documentation target(s)
build_dir = variant_dir_base / documentation_source_dir
SConscript(dirs='.', variant_dir=str(variant_dir_base), exports='documentation_source_dir', duplicate=False)
SConscript(dirs=documentation_source_dir, variant_dir=str(build_dir), exports=['env', 'project_substitution_dictionary'])

# Add simulation targets
eabm_simulation_directories = [
    'tutorial_01_geometry',
    'tutorial_02_partition_mesh',
    'tutorial_03_solverprep',
    'tutorial_04_simulation'
]
for source_dir in eabm_simulation_directories:
    build_dir = variant_dir_base / source_dir
    SConscript(dirs=source_dir, variant_dir=build_dir, exports='env', duplicate=False)
